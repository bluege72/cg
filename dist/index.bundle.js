(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["testpackage"] = factory();
	else
		root["TEST"] = factory();
})((typeof self!='undefined'?self:this), function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/@alt1/base/alt1api.ts":
/*!*********************************************!*\
  !*** ../node_modules/@alt1/base/alt1api.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuLi9ub2RlX21vZHVsZXMvQGFsdDEvYmFzZS9hbHQxYXBpLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/alt1api.ts\n");

/***/ }),

/***/ "../node_modules/@alt1/base/declarations.ts":
/*!**************************************************!*\
  !*** ../node_modules/@alt1/base/declarations.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuLi9ub2RlX21vZHVsZXMvQGFsdDEvYmFzZS9kZWNsYXJhdGlvbnMudHMuanMiLCJzb3VyY2VzQ29udGVudCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/declarations.ts\n");

/***/ }),

/***/ "../node_modules/@alt1/base/imagedata-extensions.ts":
/*!**********************************************************!*\
  !*** ../node_modules/@alt1/base/imagedata-extensions.ts ***!
  \**********************************************************/
/*! exports provided: ImageData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImageData\", function() { return ImageData; });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"../node_modules/@alt1/base/index.ts\");\n/* harmony import */ var _nodepolyfill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nodepolyfill */ \"../node_modules/@alt1/base/nodepolyfill.ts\");\n\r\n\r\n//export this so node.js can also use it\r\nvar ImageData;\r\n// //TODO revamp this madness a bit?\r\n// (function () {\r\n// \tvar globalvar = (typeof self != \"undefined\" ? self : (typeof (global as any) != \"undefined\" ? (global as any) : null)) as any;\r\n// \t//use the node-canvas version when on node\r\n// \tif (typeof globalvar.ImageData == \"undefined\") {\r\n// \t\tlet nodecnv = requireNodeCanvas();\r\n// \t\tglobalvar.ImageData = nodecnv.ImageData;\r\n// \t}\r\n// \tvar fill = typeof globalvar.ImageData == \"undefined\";\r\n// \t//should never be reach anymore\r\n// \tvar constr = function (this: any) {\r\n// \t\tvar i = 0;\r\n// \t\tvar data = (arguments[i] instanceof Uint8ClampedArray ? arguments[i++] : null);\r\n// \t\tvar width = arguments[i++];\r\n// \t\tvar height = arguments[i++];\r\n// \t\tif (fill) {\r\n// \t\t\tif (!data) { data = new Uint8ClampedArray(width * height * 4); }\r\n// \t\t\tthis.width = width;\r\n// \t\t\tthis.height = height;\r\n// \t\t\tthis.data = data;\r\n// \t\t}\r\n// \t\telse if (oldconstr) {\r\n// \t\t\treturn (data ? new oldconstr(data, width, height) : new oldconstr(width, height));\r\n// \t\t} else {\r\n// \t\t\tvar canvas = document.createElement('canvas');\r\n// \t\t\tcanvas.width = width;\r\n// \t\t\tcanvas.height = height;\r\n// \t\t\tvar ctx = canvas.getContext(\"2d\")!;\r\n// \t\t\tvar imageData = ctx.createImageData(width, height);\r\n// \t\t\tif (data) { imageData.data.set(data); }\r\n// \t\t\treturn imageData;\r\n// \t\t}\r\n// \t}\r\n// \tvar oldconstr = globalvar.ImageData;\r\n// \tif (typeof document != \"undefined\") {\r\n// \t\ttry {\r\n// \t\t\tnew oldconstr(1, 1);\r\n// \t\t} catch (e) {\r\n// \t\t\t//direct constructor call not allowed in ie\r\n// \t\t\toldconstr = null;\r\n// \t\t}\r\n// \t}\r\n// \tif (!fill) { constr.prototype = globalvar.ImageData.prototype; }\r\n// \tglobalvar.ImageData = constr;\r\n// \tImageData = constr as any;\r\n// })();\r\n(function () {\r\n    var globalvar = (typeof self != \"undefined\" ? self : (typeof global != \"undefined\" ? global : null));\r\n    var filltype = typeof globalvar.ImageData == \"undefined\" || typeof globalvar.document == \"undefined\";\r\n    var fillconstr = filltype;\r\n    if (!filltype) {\r\n        var oldconstr = globalvar.ImageData;\r\n        try {\r\n            let data = new Uint8ClampedArray(4);\r\n            data[0] = 1;\r\n            let a = new globalvar.ImageData(data, 1, 1);\r\n            fillconstr = a.data[0] != 1;\r\n        }\r\n        catch (e) {\r\n            fillconstr = true;\r\n        }\r\n    }\r\n    if (fillconstr) {\r\n        var constr = function ImageDataShim() {\r\n            var i = 0;\r\n            var data = (arguments[i] instanceof Uint8ClampedArray ? arguments[i++] : null);\r\n            var width = arguments[i++];\r\n            var height = arguments[i++];\r\n            if (filltype) {\r\n                if (!data) {\r\n                    data = new Uint8ClampedArray(width * height * 4);\r\n                }\r\n                this.width = width;\r\n                this.height = height;\r\n                this.data = data;\r\n            }\r\n            else if (fillconstr) {\r\n                //WARNING This branch of code does not use the same pixel data backing store\r\n                //(problem with wasm, however all wasm browser have a native constructor (unless asm.js is used))\r\n                var canvas = document.createElement('canvas');\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n                var ctx = canvas.getContext(\"2d\");\r\n                var imageData = ctx.createImageData(width, height);\r\n                if (data) {\r\n                    imageData.data.set(data);\r\n                }\r\n                return imageData;\r\n            }\r\n            // else {\r\n            // \t//oh no...\r\n            // \t//we need this monstrocity in order to call the native constructor with variable number of args\r\n            // \t//when es5 transpile is enable (that strips the spread operator)\r\n            // \treturn new (Function.prototype.bind.apply(oldconstr, [null,...arguments]));\r\n            // }\r\n        };\r\n        if (!filltype) {\r\n            constr.prototype = globalvar.ImageData.prototype;\r\n        }\r\n        globalvar.ImageData = constr;\r\n        ImageData = constr;\r\n    }\r\n    else {\r\n        ImageData = globalvar.ImageData;\r\n    }\r\n})();\r\n//Recast into a drawable imagedata class on all platforms, into a normal browser ImageData on browsers or a node-canvas imagedata on nodejs\r\nImageData.prototype.toDrawableData = function () {\r\n    if (typeof document == \"undefined\") {\r\n        return _nodepolyfill__WEBPACK_IMPORTED_MODULE_1__[\"imageDataToDrawable\"](this);\r\n    }\r\n    else {\r\n        return this;\r\n    }\r\n};\r\nImageData.prototype.putImageData = function (buf, cx, cy) {\r\n    for (var dx = 0; dx < buf.width; dx++) {\r\n        for (var dy = 0; dy < buf.height; dy++) {\r\n            var i1 = (dx + cx) * 4 + (dy + cy) * 4 * this.width;\r\n            var i2 = dx * 4 + dy * 4 * buf.width;\r\n            this.data[i1] = buf.data[i2];\r\n            this.data[i1 + 1] = buf.data[i2 + 1];\r\n            this.data[i1 + 2] = buf.data[i2 + 2];\r\n            this.data[i1 + 3] = buf.data[i2 + 3];\r\n        }\r\n    }\r\n};\r\nImageData.prototype.pixelOffset = function (x, y) {\r\n    return x * 4 + y * this.width * 4;\r\n};\r\n//creates a hash of a portion of the buffer used to check for changes\r\nImageData.prototype.getPixelHash = function (rect) {\r\n    if (!rect) {\r\n        rect = new _index__WEBPACK_IMPORTED_MODULE_0__[\"Rect\"](0, 0, this.width, this.height);\r\n    }\r\n    var hash = 0;\r\n    for (var x = rect.x; x < rect.x + rect.width; x++) {\r\n        for (var y = rect.y; y < rect.y + rect.height; y++) {\r\n            var i = x * 4 + y * 4 * this.width;\r\n            hash = (((hash << 5) - hash) + this.data[i]) | 0;\r\n            hash = (((hash << 5) - hash) + this.data[i + 1]) | 0;\r\n            hash = (((hash << 5) - hash) + this.data[i + 2]) | 0;\r\n            hash = (((hash << 5) - hash) + this.data[i + 3]) | 0;\r\n        }\r\n    }\r\n    return hash;\r\n};\r\nImageData.prototype.clone = function (rect) {\r\n    return this.toImage(rect).getContext(\"2d\").getImageData(0, 0, rect.width, rect.height);\r\n};\r\nImageData.prototype.show = function (x = 5, y = 5, zoom = 1) {\r\n    if (typeof document == \"undefined\") {\r\n        console.error(\"need a document to show an imagedata object\");\r\n        return;\r\n    }\r\n    var imgs = document.getElementsByClassName(\"debugimage\");\r\n    while (imgs.length > ImageData.prototype.show.maxImages) {\r\n        imgs[0].remove();\r\n    }\r\n    var el = this.toImage();\r\n    el.classList.add(\"debugimage\");\r\n    el.style.position = \"absolute\";\r\n    el.style.zIndex = \"1000\";\r\n    el.style.left = x / zoom + \"px\";\r\n    el.style.top = y / zoom + \"px\";\r\n    el.style.background = \"purple\";\r\n    el.style.cursor = \"pointer\";\r\n    el.style.imageRendering = \"pixelated\";\r\n    el.style.outline = \"1px solid #0f0\";\r\n    el.style.width = (this.width == 1 ? 100 : this.width) + \"px\";\r\n    el.style.height = (this.height == 1 ? 100 : this.height) + \"px\";\r\n    el.style.zoom = \"\" + zoom;\r\n    el.onclick = function () { el.remove(); };\r\n    document.body.appendChild(el);\r\n    return el;\r\n};\r\nImageData.prototype.show.maxImages = 10;\r\nImageData.prototype.toImage = function (rect) {\r\n    if (!rect) {\r\n        rect = new _index__WEBPACK_IMPORTED_MODULE_0__[\"Rect\"](0, 0, this.width, this.height);\r\n    }\r\n    if (typeof document != \"undefined\") {\r\n        var el = document.createElement(\"canvas\");\r\n        el.width = rect.width;\r\n        el.height = rect.height;\r\n    }\r\n    else {\r\n        el = _nodepolyfill__WEBPACK_IMPORTED_MODULE_1__[\"createCanvas\"](rect.width, rect.height);\r\n    }\r\n    var ctx = el.getContext(\"2d\");\r\n    ctx.putImageData(this.toDrawableData(), -rect.x, -rect.y);\r\n    return el;\r\n};\r\nImageData.prototype.getPixel = function (x, y) {\r\n    var i = x * 4 + y * 4 * this.width;\r\n    return [this.data[i], this.data[i + 1], this.data[i + 2], this.data[i + 3]];\r\n};\r\nImageData.prototype.getPixelValueSum = function (x, y) {\r\n    var i = x * 4 + y * 4 * this.width;\r\n    return this.data[i] + this.data[i + 1] + this.data[i + 2];\r\n};\r\nImageData.prototype.getPixelInt = function (x, y) {\r\n    var i = x * 4 + y * 4 * this.width;\r\n    return (this.data[i + 3] << 24) + (this.data[i + 0] << 16) + (this.data[i + 1] << 8) + (this.data[i + 2] << 0);\r\n};\r\nImageData.prototype.getColorDifference = function (x, y, r, g, b, a = 255) {\r\n    var i = x * 4 + y * 4 * this.width;\r\n    return Math.abs(this.data[i] - r) + Math.abs(this.data[i + 1] - g) + Math.abs(this.data[i + 2] - b) * a / 255;\r\n};\r\nImageData.prototype.setPixel = function (x, y, ...color) {\r\n    var r, g, b, a;\r\n    var [r, g, b, a] = (Array.isArray(color[0]) ? color[0] : color);\r\n    var i = x * 4 + y * 4 * this.width;\r\n    this.data[i] = r;\r\n    this.data[i + 1] = g;\r\n    this.data[i + 2] = b;\r\n    this.data[i + 3] = a == undefined ? 255 : a;\r\n};\r\nImageData.prototype.setPixelInt = function (x, y, color) {\r\n    var i = x * 4 + y * 4 * this.width;\r\n    this.data[i] = (color >> 24) & 0xff;\r\n    this.data[i + 1] = (color >> 16) & 0xff;\r\n    this.data[i + 2] = (color >> 8) & 0xff;\r\n    this.data[i + 3] = (color >> 0) & 0xff;\r\n};\r\nImageData.prototype.toFileBytes = function (format, quality) {\r\n    if (typeof HTMLCanvasElement != \"undefined\") {\r\n        return new Promise(d => this.toImage().toBlob(b => {\r\n            var r = new FileReader();\r\n            r.readAsArrayBuffer(b);\r\n            r.onload = () => d(new Uint8Array(r.result));\r\n        }, format, quality));\r\n    }\r\n    else {\r\n        return _nodepolyfill__WEBPACK_IMPORTED_MODULE_1__[\"imageDataToFileBytes\"](this, format, quality);\r\n    }\r\n};\r\nImageData.prototype.toPngBase64 = function () {\r\n    if (typeof HTMLCanvasElement != \"undefined\") {\r\n        var str = this.toImage().toDataURL(\"image/png\");\r\n        return str.slice(str.indexOf(\",\") + 1);\r\n    }\r\n    else {\r\n        throw new Error(\"synchronous image conversion not supported in nodejs, try using ImageData.prototype.toFileBytes\");\r\n    }\r\n};\r\nImageData.prototype.pixelCompare = function (buf, x = 0, y = 0, max) {\r\n    return _index__WEBPACK_IMPORTED_MODULE_0__[\"ImageDetect\"].simpleCompare(this, buf, x, y, max);\r\n};\r\nImageData.prototype.copyTo = function (target, sourcex, sourcey, width, height, targetx, targety) {\r\n    //convince v8 that these are 31bit uints\r\n    const targetwidth = width | 0;\r\n    const thiswidth = this.width | 0;\r\n    const fastwidth = Math.floor(width / 4) * 4;\r\n    const thisdata = new Int32Array(this.data.buffer, this.data.byteOffset, this.data.byteLength / 4);\r\n    const targetdata = new Int32Array(target.data.buffer, target.data.byteOffset, target.data.byteLength / 4);\r\n    for (let cy = 0; cy < height; cy++) {\r\n        let cx = 0;\r\n        let it = (cx + targetx) + (cy + targety) * targetwidth;\r\n        let is = (cx + sourcex) + (cy + sourcey) * thiswidth;\r\n        //copy 4 pixels per iter (xmm)\r\n        for (; cx < fastwidth; cx += 4) {\r\n            targetdata[it] = thisdata[is];\r\n            targetdata[it + 1] = thisdata[is + 1];\r\n            targetdata[it + 2] = thisdata[is + 2];\r\n            targetdata[it + 3] = thisdata[is + 3];\r\n            it += 4;\r\n            is += 4;\r\n        }\r\n        //copy remainder per pixel\r\n        for (; cx < targetwidth; cx++) {\r\n            targetdata[it] = thisdata[is];\r\n            it += 1;\r\n            is += 1;\r\n        }\r\n    }\r\n};\r\nif (typeof HTMLImageElement != \"undefined\") {\r\n    HTMLImageElement.prototype.toBuffer = function (x = 0, y = 0, w = this.width, h = this.height) {\r\n        var cnv = document.createElement(\"canvas\");\r\n        cnv.width = w;\r\n        cnv.height = h;\r\n        var ctx = cnv.getContext(\"2d\");\r\n        ctx.drawImage(this, -x, -y);\r\n        return ctx.getImageData(0, 0, w, h);\r\n    };\r\n    HTMLImageElement.prototype.toCanvas = function (x = 0, y = 0, w = this.width, h = this.height) {\r\n        var cnv = document.createElement(\"canvas\");\r\n        cnv.width = w;\r\n        cnv.height = h;\r\n        var ctx = cnv.getContext(\"2d\");\r\n        ctx.drawImage(this, -x, -y);\r\n        return cnv;\r\n    };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/imagedata-extensions.ts\n");

/***/ }),

/***/ "../node_modules/@alt1/base/imagedetect.ts":
/*!*************************************************!*\
  !*** ../node_modules/@alt1/base/imagedetect.ts ***!
  \*************************************************/
/*! exports provided: imageDataFromUrl, imageDataFromBase64, imageDataFromFileBuffer, isPngBuffer, clearPngColorspace, findSubimage, findSubbuffer, simpleCompare, coldif, asyncMap, webpackImages, ImageDataSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"imageDataFromUrl\", function() { return imageDataFromUrl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"imageDataFromBase64\", function() { return imageDataFromBase64; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"imageDataFromFileBuffer\", function() { return imageDataFromFileBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isPngBuffer\", function() { return isPngBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearPngColorspace\", function() { return clearPngColorspace; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findSubimage\", function() { return findSubimage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findSubbuffer\", function() { return findSubbuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"simpleCompare\", function() { return simpleCompare; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"coldif\", function() { return coldif; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asyncMap\", function() { return asyncMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"webpackImages\", function() { return webpackImages; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImageDataSet\", function() { return ImageDataSet; });\n/* harmony import */ var _imgref__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imgref */ \"../node_modules/@alt1/base/imgref.ts\");\n/* harmony import */ var _wrapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wrapper */ \"../node_modules/@alt1/base/wrapper.ts\");\n/* harmony import */ var _nodepolyfill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nodepolyfill */ \"../node_modules/@alt1/base/nodepolyfill.ts\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! . */ \"../node_modules/@alt1/base/index.ts\");\n\r\n\r\n\r\n\r\n/**\r\n* Downloads an image and returns the ImageData\r\n* Make sure the png image does not have a sRGB chunk or the resulting pixels will differ for different users!!!\r\n* @param url http(s) or data url to the image\r\n*/\r\nasync function imageDataFromUrl(url) {\r\n    if (typeof Image != \"undefined\") {\r\n        var img = new Image();\r\n        img.crossOrigin = \"crossorigin\";\r\n        return await new Promise((done, fail) => {\r\n            img.onload = function () { done(img.toBuffer()); };\r\n            img.onerror = fail;\r\n            img.src = url;\r\n        });\r\n    }\r\n    else {\r\n        var hdr = \"data:image/png;base64,\";\r\n        if (url.startsWith(hdr)) {\r\n            return imageDataFromBase64(url.slice(hdr.length));\r\n        }\r\n        throw new Error(\"loading remote images in nodejs has been disabled, load the raw bytes and use imageDataFromNodeBuffer instead\");\r\n    }\r\n}\r\n/**\r\n* Loads an ImageData object from a base64 encoded png image\r\n* Make sure the png image does not have a sRGB chunk or the resulting pixels will differ for different users!!!\r\n* @param data a base64 encoded png image\r\n*/\r\nasync function imageDataFromBase64(data) {\r\n    if (typeof Image != \"undefined\") {\r\n        return imageDataFromUrl(\"data:image/png;base64,\" + data);\r\n    }\r\n    else {\r\n        return _nodepolyfill__WEBPACK_IMPORTED_MODULE_2__[\"imageDataFromBase64\"](data);\r\n    }\r\n}\r\n/**\r\n * Loads an ImageData object directly from a png encoded file buffer\r\n * This method ensures that png color space headers are taken care off\r\n * @param data The bytes of a png file\r\n */\r\nasync function imageDataFromFileBuffer(data) {\r\n    clearPngColorspace(data);\r\n    if (typeof Image != \"undefined\") {\r\n        let blob = new Blob([data], { type: \"image/png\" });\r\n        let url = URL.createObjectURL(blob);\r\n        let r = await imageDataFromUrl(url);\r\n        URL.revokeObjectURL(url);\r\n        return r;\r\n    }\r\n    else {\r\n        return _nodepolyfill__WEBPACK_IMPORTED_MODULE_2__[\"imageDataFromBuffer\"](data);\r\n    }\r\n}\r\n/**\r\n* Checks if a given byte array is a png file (by checking for ?PNG as first 4 bytes)\r\n* @param bytes Raw bytes of the png file\r\n*/\r\nfunction isPngBuffer(bytes) {\r\n    return bytes[0] == 137 && bytes[1] == 80 && bytes[2] == 78 && bytes[3] == 71;\r\n}\r\n/**\r\n* Resets the colorspace data in the png file.\r\n* This makes sure the browser renders the exact colors in the file instead of filtering it in order to obtain the best real life representation of\r\n* what it looked like on the authors screen. (this feature is often broken and not supported)\r\n* For example a round trip printscreen -> open in browser results in different colors than the original\r\n* @param data Raw bytes of the png file\r\n*/\r\nfunction clearPngColorspace(data) {\r\n    if (!isPngBuffer(data)) {\r\n        throw new Error(\"non-png image received\");\r\n    }\r\n    var i = 8;\r\n    while (i < data.length) {\r\n        var length = data[i++] * 0x1000000 + data[i++] * 0x10000 + data[i++] * 0x100 + data[i++];\r\n        var ancillary = !!((data[i] >> 5) & 1);\r\n        var chunkname = String.fromCharCode(data[i], data[i + 1], data[i + 2], data[i + 3]);\r\n        var chunkid = chunkname.toLowerCase();\r\n        if (chunkid != \"trns\" && ancillary) {\r\n            data[i + 0] = \"n\".charCodeAt(0);\r\n            data[i + 1] = \"o\".charCodeAt(0);\r\n            data[i + 2] = \"P\".charCodeAt(0);\r\n            data[i + 3] = \"E\".charCodeAt(0);\r\n            //calculate new chunk checksum\r\n            //http://www.libpng.org/pub/png/spec/1.2/PNG-CRCAppendix.html\r\n            var end = i + 4 + length;\r\n            var crc = 0xffffffff;\r\n            //should be fast enough like this\r\n            var bitcrc = function (bit) {\r\n                for (var k = 0; k < 8; k++) {\r\n                    if (bit & 1) {\r\n                        bit = 0xedb88320 ^ (bit >>> 1);\r\n                    }\r\n                    else {\r\n                        bit = bit >>> 1;\r\n                    }\r\n                }\r\n                return bit;\r\n            };\r\n            for (var a = i; a < end; a++) {\r\n                if (a >= i + 4) {\r\n                    data[a] = 0;\r\n                }\r\n                var bit = data[a];\r\n                crc = bitcrc((crc ^ bit) & 0xff) ^ (crc >>> 8);\r\n            }\r\n            crc = crc ^ 0xffffffff;\r\n            //new chunk checksum\r\n            data[i + 4 + length + 0] = (crc >> 24) & 0xff;\r\n            data[i + 4 + length + 1] = (crc >> 16) & 0xff;\r\n            data[i + 4 + length + 2] = (crc >> 8) & 0xff;\r\n            data[i + 4 + length + 3] = (crc >> 0) & 0xff;\r\n        }\r\n        if (chunkname == \"IEND\") {\r\n            break;\r\n        }\r\n        i += 4; //type\r\n        i += length; //data\r\n        i += 4; //crc\r\n    }\r\n}\r\n/**\r\n* finds the given needle ImageBuffer in the given haystack ImgRef this function uses the best optimized available\r\n* code depending on the type of the haystack. It will use fast c# searching if the haystack is an ImgRefBind, js searching\r\n* is used otherwise.\r\n* the checklist argument is no longer used and should ignored or null/undefined\r\n* The optional sx,sy,sw,sh arguments indicate a bounding rectangle in which to search the needle. The rectangle should be bigger than the needle\r\n* @returns An array of points where the needle is found. The array is empty if none are found\r\n*/\r\nfunction findSubimage(haystackImgref, needleBuffer, sx = 0, sy = 0, sw = haystackImgref.width, sh = haystackImgref.height) {\r\n    if (!haystackImgref) {\r\n        throw new TypeError();\r\n    }\r\n    if (!needleBuffer) {\r\n        throw new TypeError();\r\n    }\r\n    var max = 30;\r\n    //check if we can do this in alt1\r\n    if (haystackImgref instanceof _imgref__WEBPACK_IMPORTED_MODULE_0__[\"ImgRefBind\"] && _wrapper__WEBPACK_IMPORTED_MODULE_1__[\"hasAlt1\"] && alt1.bindFindSubImg) {\r\n        var needlestr = _wrapper__WEBPACK_IMPORTED_MODULE_1__[\"encodeImageString\"](needleBuffer);\r\n        var r = alt1.bindFindSubImg(haystackImgref.handle, needlestr, needleBuffer.width, sx, sy, sw, sh);\r\n        if (!r) {\r\n            throw new _wrapper__WEBPACK_IMPORTED_MODULE_1__[\"Alt1Error\"]();\r\n        }\r\n        return JSON.parse(r);\r\n    }\r\n    return findSubbuffer(haystackImgref.read(), needleBuffer, sx, sy, sw, sh);\r\n}\r\n/**\r\n* Uses js to find the given needle ImageBuffer in the given haystack ImageBuffer. It is better to use the alt1.bind- functions in\r\n* combination with a1nxt.findsubimg.\r\n* the optional sx,sy,sw,sh arguments indicate a bounding rectangle in which to search.\r\n* @returns An array of points where the needle is found. The array is empty if none are found\r\n*/\r\nfunction findSubbuffer(haystack, needle, sx = 0, sy = 0, sw = haystack.width, sh = haystack.height) {\r\n    var r = [];\r\n    var maxdif = 30;\r\n    var maxresults = 50;\r\n    var needlestride = needle.width * 4;\r\n    var heystackstride = haystack.width * 4;\r\n    //built list of non trans pixel to check\r\n    var checkList = [];\r\n    for (var y = 0; y < needle.height; y++) {\r\n        for (var x = 0; x < needle.width; x++) {\r\n            var i = x * 4 + y * needlestride;\r\n            if (needle.data[i + 3] == 255) {\r\n                checkList.push({ x: x, y: y });\r\n            }\r\n            if (checkList.length == 10) {\r\n                break;\r\n            }\r\n        }\r\n        if (checkList.length == 10) {\r\n            break;\r\n        }\r\n    }\r\n    var cw = (sx + sw) - needle.width;\r\n    var ch = (sy + sh) - needle.height;\r\n    var checklength = checkList.length;\r\n    for (var y = sy; y <= ch; y++) {\r\n        outer: for (var x = sx; x <= cw; x++) {\r\n            for (var a = 0; a < checklength; a++) {\r\n                var i1 = (x + checkList[a].x) * 4 + (y + checkList[a].y) * heystackstride;\r\n                var i2 = checkList[a].x * 4 + checkList[a].y * needlestride;\r\n                var d = 0;\r\n                d = d + Math.abs(haystack.data[i1 + 0] - needle.data[i2 + 0]) | 0;\r\n                d = d + Math.abs(haystack.data[i1 + 1] - needle.data[i2 + 1]) | 0;\r\n                d = d + Math.abs(haystack.data[i1 + 2] - needle.data[i2 + 2]) | 0;\r\n                d *= 255 / needle.data[i2 + 3];\r\n                if (d > maxdif) {\r\n                    continue outer;\r\n                }\r\n            }\r\n            if (simpleCompare(haystack, needle, x, y, maxdif) != Infinity) {\r\n                r.push({ x, y });\r\n                if (r.length > maxresults) {\r\n                    return r;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n/**\r\n* Compares two images and returns the average color difference per pixel between them\r\n* @param max The max color difference at any point in the image before short circuiting the function and returning Infinity. set to -1 to always continue.\r\n* @returns The average color difference per pixel or Infinity if the difference is more than max at any point in the image\r\n*/\r\nfunction simpleCompare(bigbuf, checkbuf, x, y, max = 30) {\r\n    if (x < 0 || y < 0) {\r\n        throw new RangeError();\r\n    }\r\n    if (x + checkbuf.width > bigbuf.width || y + checkbuf.height > bigbuf.height) {\r\n        throw new RangeError();\r\n    }\r\n    if (max == -1) {\r\n        max = 255 * 4;\r\n    }\r\n    var dif = 0;\r\n    for (var step = 8; step >= 1; step /= 2) {\r\n        for (var cx = 0; cx < checkbuf.width; cx += step) {\r\n            for (var cy = 0; cy < checkbuf.height; cy += step) {\r\n                var i1 = (x + cx) * 4 + (y + cy) * bigbuf.width * 4;\r\n                var i2 = cx * 4 + cy * checkbuf.width * 4;\r\n                var d = 0;\r\n                d = d + Math.abs(bigbuf.data[i1 + 0] - checkbuf.data[i2 + 0]) | 0;\r\n                d = d + Math.abs(bigbuf.data[i1 + 1] - checkbuf.data[i2 + 1]) | 0;\r\n                d = d + Math.abs(bigbuf.data[i1 + 2] - checkbuf.data[i2 + 2]) | 0;\r\n                d *= checkbuf.data[i2 + 3] / 255;\r\n                if (step == 1) {\r\n                    dif += d;\r\n                }\r\n                if (d > max) {\r\n                    return Infinity;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return dif / checkbuf.width / checkbuf.height;\r\n}\r\n/**\r\n* Returns the difference between two colors (scaled to the alpha of the second color)\r\n*/\r\nfunction coldif(r1, g1, b1, r2, g2, b2, a2) {\r\n    return (Math.abs(r1 - r2) + Math.abs(g1 - g2) + Math.abs(b1 - b2)) * a2 / 255; //only applies alpha for 2nd buffer!\r\n}\r\n/**\r\n * Turns map of promises into a map that contains the resolved values after loading.\r\n * @param input\r\n */\r\nfunction asyncMap(input) {\r\n    var raw = {};\r\n    var promises = [];\r\n    for (var a in input) {\r\n        if (input.hasOwnProperty(a)) {\r\n            raw[a] = null;\r\n            promises.push(input[a].then(function (a, i) { raw[a] = i; r[a] = i; }.bind(null, a)));\r\n        }\r\n    }\r\n    var r = {};\r\n    var promise = Promise.all(promises).then(() => { r.loaded = true; return r; });\r\n    Object.defineProperty(r, \"loaded\", { enumerable: false, value: false, writable: true });\r\n    Object.defineProperty(r, \"promise\", { enumerable: false, value: promise });\r\n    Object.defineProperty(r, \"raw\", { enumerable: false, value: raw });\r\n    return Object.assign(r, raw);\r\n}\r\n/**\r\n* Same as asyncMap, but casts the properties to ImageData in typescript\r\n*/\r\nfunction webpackImages(input) {\r\n    return asyncMap(input);\r\n}\r\nclass ImageDataSet {\r\n    constructor() {\r\n        this.buffers = [];\r\n    }\r\n    matchBest(img, x, y, max) {\r\n        let best = null;\r\n        let bestscore = max;\r\n        for (let a = 0; a < this.buffers.length; a++) {\r\n            let score = img.pixelCompare(this.buffers[a], x, y, bestscore);\r\n            if (isFinite(score) && (bestscore == undefined || score < bestscore)) {\r\n                bestscore = score;\r\n                best = a;\r\n            }\r\n        }\r\n        if (best == null) {\r\n            return null;\r\n        }\r\n        return { index: best, score: bestscore };\r\n    }\r\n    static fromFilmStrip(baseimg, width) {\r\n        if ((baseimg.width % width) != 0) {\r\n            throw new Error(\"slice size does not fit in base img\");\r\n        }\r\n        let r = new ImageDataSet();\r\n        for (let x = 0; x < baseimg.width; x += width) {\r\n            r.buffers.push(baseimg.clone(new ___WEBPACK_IMPORTED_MODULE_3__[\"Rect\"](x, 0, width, baseimg.height)));\r\n        }\r\n        return r;\r\n    }\r\n    static fromFilmStripUneven(baseimg, widths) {\r\n        let r = new ImageDataSet();\r\n        let x = 0;\r\n        for (let w of widths) {\r\n            r.buffers.push(baseimg.clone(new ___WEBPACK_IMPORTED_MODULE_3__[\"Rect\"](x, 0, w, baseimg.height)));\r\n            x += w;\r\n            if (x > baseimg.width) {\r\n                throw new Error(\"sampling filmstrip outside bounds\");\r\n            }\r\n        }\r\n        if (x != baseimg.width) {\r\n            throw new Error(\"unconsumed pixels left in film strip imagedata\");\r\n        }\r\n        return r;\r\n    }\r\n    static fromAtlas(baseimg, slices) {\r\n        let r = new ImageDataSet();\r\n        for (let slice of slices) {\r\n            r.buffers.push(baseimg.clone(slice));\r\n        }\r\n        return r;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/imagedetect.ts\n");

/***/ }),

/***/ "../node_modules/@alt1/base/imgref.ts":
/*!********************************************!*\
  !*** ../node_modules/@alt1/base/imgref.ts ***!
  \********************************************/
/*! exports provided: ImgRef, ImgRefCtx, ImgRefBind, ImgRefData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImgRef\", function() { return ImgRef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImgRefCtx\", function() { return ImgRefCtx; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImgRefBind\", function() { return ImgRefBind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImgRefData\", function() { return ImgRefData; });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"../node_modules/@alt1/base/index.ts\");\n\r\n/**\r\n * Represents an image that might be in different types of memory\r\n * This is mostly used to represent images still in Alt1 memory that have\r\n * not been transfered to js yet. Various a1lib api's use this type and\r\n * choose the most efficient approach based on the memory type\r\n */\r\nclass ImgRef {\r\n    constructor(x, y, w, h) {\r\n        this.t = \"none\";\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = w;\r\n        this.height = h;\r\n    }\r\n    read(x = 0, y = 0, w = this.width, h = this.height) {\r\n        throw new Error(\"This imgref (\" + this.t + \") does not support toData\");\r\n    }\r\n    findSubimage(needle, sx = 0, sy = 0, w = this.width, h = this.height) {\r\n        return _index__WEBPACK_IMPORTED_MODULE_0__[\"ImageDetect\"].findSubimage(this, needle, sx, sy, w, h);\r\n    }\r\n    toData(x = this.x, y = this.y, w = this.width, h = this.height) {\r\n        return this.read(x - this.x, y - this.y, w, h);\r\n    }\r\n    ;\r\n    containsArea(rect) {\r\n        return this.x <= rect.x && this.y <= rect.y && this.x + this.width >= rect.x + rect.width && this.y + this.height >= rect.y + rect.height;\r\n    }\r\n}\r\n/**\r\n * Represents an image in js render memory (canvas/image tag)\r\n */\r\nclass ImgRefCtx extends ImgRef {\r\n    constructor(img, x = 0, y = 0) {\r\n        if (img instanceof CanvasRenderingContext2D) {\r\n            super(x, y, img.canvas.width, img.canvas.height);\r\n            this.ctx = img;\r\n        }\r\n        else {\r\n            super(x, y, img.width, img.height);\r\n            var cnv = (img instanceof HTMLCanvasElement ? img : img.toCanvas());\r\n            this.ctx = cnv.getContext(\"2d\");\r\n        }\r\n        this.t = \"ctx\";\r\n    }\r\n    read(x = 0, y = 0, w = this.width, h = this.height) {\r\n        return this.ctx.getImageData(x, y, w, h);\r\n    }\r\n}\r\n/**\r\n * Represents in image in Alt1 memory, This type of image can be searched for subimages\r\n * very efficiently and transfering the full image to js can be avoided this way\r\n */\r\nclass ImgRefBind extends ImgRef {\r\n    constructor(handle, x = 0, y = 0, w = 0, h = 0) {\r\n        super(x, y, w, h);\r\n        this.handle = handle;\r\n        this.t = \"bind\";\r\n    }\r\n    read(x = 0, y = 0, w = this.width, h = this.height) {\r\n        return Object(_index__WEBPACK_IMPORTED_MODULE_0__[\"transferImageData\"])(this.handle, x, y, w, h);\r\n    }\r\n}\r\n/**\r\n * Represents an image in js memory\r\n */\r\nclass ImgRefData extends ImgRef {\r\n    constructor(buf, x = 0, y = 0) {\r\n        super(x, y, buf.width, buf.height);\r\n        this.buf = buf;\r\n        this.t = \"data\";\r\n    }\r\n    read(x = 0, y = 0, w = this.width, h = this.height) {\r\n        if (x == 0 && y == 0 && w == this.width && h == this.height) {\r\n            return this.buf;\r\n        }\r\n        var r = new ImageData(w, h);\r\n        for (var b = y; b < y + h; b++) {\r\n            for (var a = x; a < x + w; a++) {\r\n                var i1 = (a - x) * 4 + (b - y) * w * 4;\r\n                var i2 = a * 4 + b * 4 * this.buf.width;\r\n                r.data[i1] = this.buf.data[i2];\r\n                r.data[i1 + 1] = this.buf.data[i2 + 1];\r\n                r.data[i1 + 2] = this.buf.data[i2 + 2];\r\n                r.data[i1 + 3] = this.buf.data[i2 + 3];\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/imgref.ts\n");

/***/ }),

/***/ "../node_modules/@alt1/base/index.ts":
/*!*******************************************!*\
  !*** ../node_modules/@alt1/base/index.ts ***!
  \*******************************************/
/*! exports provided: PasteInput, ImageDetect, Rect, ImageData, ImgRef, ImgRefCtx, ImgRefBind, ImgRefData, NoAlt1Error, Alt1Error, newestversion, hasAlt1, skinName, openbrowser, requireAlt1, getdisplaybounds, capture, captureHold, captureHoldScreen, captureHoldFullRs, transferImageData, decodeImageString, encodeImageString, mixColor, unmixColor, identifyApp, hasAlt1Version, getMousePosition, addResizeElement, on, removeListener, once, ImageStreamReader, captureAsync, captureMultiAsync, captureStream */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _declarations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./declarations */ \"../node_modules/@alt1/base/declarations.ts\");\n/* harmony import */ var _declarations__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_declarations__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _imagedetect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imagedetect */ \"../node_modules/@alt1/base/imagedetect.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"ImageDetect\", function() { return _imagedetect__WEBPACK_IMPORTED_MODULE_1__; });\n/* harmony import */ var _pasteinput__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pasteinput */ \"../node_modules/@alt1/base/pasteinput.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"PasteInput\", function() { return _pasteinput__WEBPACK_IMPORTED_MODULE_2__; });\n/* harmony import */ var _rect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rect */ \"../node_modules/@alt1/base/rect.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Rect\", function() { return _rect__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _imagedata_extensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./imagedata-extensions */ \"../node_modules/@alt1/base/imagedata-extensions.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ImageData\", function() { return _imagedata_extensions__WEBPACK_IMPORTED_MODULE_4__[\"ImageData\"]; });\n\n/* harmony import */ var _imgref__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./imgref */ \"../node_modules/@alt1/base/imgref.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ImgRef\", function() { return _imgref__WEBPACK_IMPORTED_MODULE_5__[\"ImgRef\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ImgRefCtx\", function() { return _imgref__WEBPACK_IMPORTED_MODULE_5__[\"ImgRefCtx\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ImgRefBind\", function() { return _imgref__WEBPACK_IMPORTED_MODULE_5__[\"ImgRefBind\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ImgRefData\", function() { return _imgref__WEBPACK_IMPORTED_MODULE_5__[\"ImgRefData\"]; });\n\n/* harmony import */ var _wrapper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./wrapper */ \"../node_modules/@alt1/base/wrapper.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NoAlt1Error\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"NoAlt1Error\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Alt1Error\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"Alt1Error\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"newestversion\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"newestversion\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"hasAlt1\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"hasAlt1\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"skinName\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"skinName\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"openbrowser\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"openbrowser\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"requireAlt1\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"requireAlt1\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"getdisplaybounds\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"getdisplaybounds\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"capture\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"capture\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"captureHold\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"captureHold\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"captureHoldScreen\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"captureHoldScreen\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"captureHoldFullRs\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"captureHoldFullRs\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transferImageData\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"transferImageData\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"decodeImageString\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"decodeImageString\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"encodeImageString\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"encodeImageString\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"mixColor\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"mixColor\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"unmixColor\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"unmixColor\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"identifyApp\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"identifyApp\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"hasAlt1Version\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"hasAlt1Version\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"getMousePosition\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"getMousePosition\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"addResizeElement\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"addResizeElement\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"on\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"on\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"removeListener\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"removeListener\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"once\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"once\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ImageStreamReader\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"ImageStreamReader\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"captureAsync\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"captureAsync\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"captureMultiAsync\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"captureMultiAsync\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"captureStream\", function() { return _wrapper__WEBPACK_IMPORTED_MODULE_6__[\"captureStream\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // syntax not yet supported in webpack\r\n// // this should improve tree shaking\r\n// import \"./declarations\";\r\n// export * as ImageDetect from \"./imagedetect\";\r\n// export * as PasteInput from \"./pasteinput\";\r\n// export { default as Rect, RectLike, PointLike } from \"./rect\";\r\n// export { ImageData } from \"./imagedata-extensions\";\r\n// export * from \"./imgref\";\r\n// export * from \"./wrapper\";\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9URVNULy4uL25vZGVfbW9kdWxlcy9AYWx0MS9iYXNlL2luZGV4LnRzPzM3YTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBd0I7QUFFcUI7QUFDRjtBQUNRO0FBQ0E7QUFFc0I7QUFDaEQ7QUFDQztBQUcxQix5Q0FBeUM7QUFDekMsc0NBQXNDO0FBQ3RDLDJCQUEyQjtBQUUzQixnREFBZ0Q7QUFDaEQsOENBQThDO0FBQzlDLGlFQUFpRTtBQUNqRSxzREFBc0Q7QUFFdEQsNEJBQTRCO0FBQzVCLDZCQUE2QiIsImZpbGUiOiIuLi9ub2RlX21vZHVsZXMvQGFsdDEvYmFzZS9pbmRleC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuaW1wb3J0IFwiLi9kZWNsYXJhdGlvbnNcIjtcclxuXHJcbmltcG9ydCAqIGFzIEltYWdlRGV0ZWN0IGZyb20gXCIuL2ltYWdlZGV0ZWN0XCI7XHJcbmltcG9ydCAqIGFzIFBhc3RlSW5wdXQgZnJvbSBcIi4vcGFzdGVpbnB1dFwiO1xyXG5pbXBvcnQgUmVjdCwgeyBSZWN0TGlrZSwgUG9pbnRMaWtlIH0gZnJvbSBcIi4vcmVjdFwiO1xyXG5pbXBvcnQgeyBJbWFnZURhdGEgfSBmcm9tIFwiLi9pbWFnZWRhdGEtZXh0ZW5zaW9uc1wiO1xyXG5cclxuZXhwb3J0IHsgUGFzdGVJbnB1dCwgSW1hZ2VEZXRlY3QsIFJlY3QsIFJlY3RMaWtlLCBJbWFnZURhdGEsIFBvaW50TGlrZSB9O1xyXG5leHBvcnQgKiBmcm9tIFwiLi9pbWdyZWZcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vd3JhcHBlclwiO1xyXG5cclxuXHJcbi8vIC8vIHN5bnRheCBub3QgeWV0IHN1cHBvcnRlZCBpbiB3ZWJwYWNrXHJcbi8vIC8vIHRoaXMgc2hvdWxkIGltcHJvdmUgdHJlZSBzaGFraW5nXHJcbi8vIGltcG9ydCBcIi4vZGVjbGFyYXRpb25zXCI7XHJcblxyXG4vLyBleHBvcnQgKiBhcyBJbWFnZURldGVjdCBmcm9tIFwiLi9pbWFnZWRldGVjdFwiO1xyXG4vLyBleHBvcnQgKiBhcyBQYXN0ZUlucHV0IGZyb20gXCIuL3Bhc3RlaW5wdXRcIjtcclxuLy8gZXhwb3J0IHsgZGVmYXVsdCBhcyBSZWN0LCBSZWN0TGlrZSwgUG9pbnRMaWtlIH0gZnJvbSBcIi4vcmVjdFwiO1xyXG4vLyBleHBvcnQgeyBJbWFnZURhdGEgfSBmcm9tIFwiLi9pbWFnZWRhdGEtZXh0ZW5zaW9uc1wiO1xyXG5cclxuLy8gZXhwb3J0ICogZnJvbSBcIi4vaW1ncmVmXCI7XHJcbi8vIGV4cG9ydCAqIGZyb20gXCIuL3dyYXBwZXJcIjtcclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/index.ts\n");

/***/ }),

/***/ "../node_modules/@alt1/base/nodepolyfill.ts":
/*!**************************************************!*\
  !*** ../node_modules/@alt1/base/nodepolyfill.ts ***!
  \**************************************************/
/*! exports provided: imageDataToDrawable, createCanvas, imageDataToFileBytes, imageDataFromBase64, imageDataFromBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"imageDataToDrawable\", function() { return imageDataToDrawable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createCanvas\", function() { return createCanvas; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"imageDataToFileBytes\", function() { return imageDataToFileBytes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"imageDataFromBase64\", function() { return imageDataFromBase64; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"imageDataFromBuffer\", function() { return imageDataFromBuffer; });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"../node_modules/@alt1/base/index.ts\");\n/* harmony import */ var _imagedetect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imagedetect */ \"../node_modules/@alt1/base/imagedetect.ts\");\n//nodejs and electron polyfills for web api's\r\n//commented out type info as that breaks webpack with optional dependencies\r\n\r\n\r\nfunction requireNodeCanvas() {\r\n    if (typeof require != \"undefined\") {\r\n        //attempt to require sharp first, after loading canvas the module sharp fails to load\r\n        requireSharp();\r\n        try {\r\n            return require(\"canvas\"); // as typeof import(\"canvas\");\r\n        }\r\n        catch (e) { }\r\n    }\r\n    return null;\r\n}\r\nfunction requireSharp() {\r\n    if (typeof require != \"undefined\") {\r\n        try {\r\n            return require(\"sharp\"); // as typeof import(\"sharp\");\r\n        }\r\n        catch (e) { }\r\n    }\r\n    return null;\r\n}\r\nfunction requireElectronCommon() {\r\n    if (typeof require != \"undefined\") {\r\n        try {\r\n            return require(\"electron/common\");\r\n        }\r\n        catch (e) { }\r\n    }\r\n    return null;\r\n}\r\nfunction imageDataToDrawable(buf) {\r\n    let nodecnv = requireNodeCanvas();\r\n    if (!nodecnv) {\r\n        throw new Error(\"couldn't find built-in canvas or the module 'canvas'\");\r\n    }\r\n    return new nodecnv.ImageData(buf.data, buf.width, buf.height);\r\n}\r\nfunction createCanvas(w, h) {\r\n    let nodecnv = requireNodeCanvas();\r\n    if (!nodecnv) {\r\n        throw new Error(\"couldn't find built-in canvas or the module 'canvas'\");\r\n    }\r\n    return nodecnv.createCanvas(w, h);\r\n}\r\nfunction flipBGRAtoRGBA(data) {\r\n    for (let i = 0; i < data.length; i += 4) {\r\n        let tmp = data[i + 2];\r\n        data[i + 2] = data[i + 0];\r\n        data[i + 0] = tmp;\r\n    }\r\n}\r\nasync function imageDataToFileBytes(buf, format, quality) {\r\n    //use the electron API if we're in electron\r\n    var electronCommon;\r\n    var sharp;\r\n    if (electronCommon = requireElectronCommon()) {\r\n        let nativeImage = electronCommon.nativeImage;\r\n        //need to copy the buffer in order to flip it without destroying the original\r\n        let bufcpy = Buffer.from(buf.data.slice(buf.data.byteOffset, buf.data.byteLength));\r\n        flipBGRAtoRGBA(bufcpy);\r\n        let nativeimg = nativeImage.createFromBitmap(bufcpy, { width: buf.width, height: buf.height });\r\n        return nativeimg.toPNG();\r\n    }\r\n    else if (sharp = requireSharp()) {\r\n        let img = sharp(Buffer.from(buf.data.buffer), { raw: { width: buf.width, height: buf.height, channels: 4 } });\r\n        if (format == \"image/png\") {\r\n            img.png();\r\n        }\r\n        else if (format == \"image/webp\") {\r\n            var opts = { quality: 80 };\r\n            if (typeof quality == \"number\") {\r\n                opts.quality = quality * 100;\r\n            }\r\n            img.webp(opts);\r\n        }\r\n        else {\r\n            throw new Error(\"unknown image format: \" + format);\r\n        }\r\n        return await img.toBuffer({ resolveWithObject: false }).buffer;\r\n    }\r\n    throw new Error(\"coulnd't find build-in image compression methods or the module 'electron/common' or 'sharp'\");\r\n}\r\nfunction imageDataFromBase64(base64) {\r\n    return imageDataFromBuffer(Buffer.from(base64, \"base64\"));\r\n}\r\nasync function imageDataFromBuffer(buffer) {\r\n    Object(_imagedetect__WEBPACK_IMPORTED_MODULE_1__[\"clearPngColorspace\"])(buffer);\r\n    //use the electron API if we're in electron\r\n    var electronCommon;\r\n    var nodecnv;\r\n    if (electronCommon = requireElectronCommon()) {\r\n        let nativeImage = electronCommon.nativeImage;\r\n        let img = nativeImage.createFromBuffer(buffer);\r\n        let pixels = img.toBitmap();\r\n        let size = img.getSize();\r\n        let pixbuf = new Uint8ClampedArray(pixels.buffer, pixels.byteOffset, pixels.byteLength);\r\n        flipBGRAtoRGBA(pixbuf);\r\n        return new _index__WEBPACK_IMPORTED_MODULE_0__[\"ImageData\"](pixbuf, size.width, size.height);\r\n    }\r\n    else if (nodecnv = requireNodeCanvas()) {\r\n        return new Promise((done, err) => {\r\n            let img = new nodecnv.Image();\r\n            img.onerror = err;\r\n            img.onload = () => {\r\n                var cnv = nodecnv.createCanvas(img.naturalWidth, img.naturalHeight);\r\n                var ctx = cnv.getContext(\"2d\");\r\n                ctx.drawImage(img, 0, 0);\r\n                var data = ctx.getImageData(0, 0, img.naturalWidth, img.naturalHeight);\r\n                //use our own class\r\n                done(new _index__WEBPACK_IMPORTED_MODULE_0__[\"ImageData\"](data.data, data.width, data.height));\r\n            };\r\n            img.src = Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\r\n        });\r\n    }\r\n    throw new Error(\"couldn't find built-in canvas, module 'electron/common' or the module 'canvas'\");\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/nodepolyfill.ts\n");

/***/ }),

/***/ "../node_modules/@alt1/base/pasteinput.ts":
/*!************************************************!*\
  !*** ../node_modules/@alt1/base/pasteinput.ts ***!
  \************************************************/
/*! exports provided: lastref, listen, unlisten, triggerPaste, startDragNDrop, start, fileDialog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lastref\", function() { return lastref; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"listen\", function() { return listen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unlisten\", function() { return unlisten; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"triggerPaste\", function() { return triggerPaste; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"startDragNDrop\", function() { return startDragNDrop; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"start\", function() { return start; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fileDialog\", function() { return fileDialog; });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"../node_modules/@alt1/base/index.ts\");\n/* harmony import */ var _imagedetect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imagedetect */ \"../node_modules/@alt1/base/imagedetect.ts\");\n\r\n\r\nvar listeners = [];\r\nvar started = false;\r\nvar dndStarted = false;\r\nvar pasting = false;\r\nvar lastref = null;\r\nfunction listen(func, errorfunc, dragndrop) {\r\n    listeners.push({ cb: func, error: errorfunc });\r\n    if (!started) {\r\n        start();\r\n    }\r\n    if (dragndrop && !dndStarted) {\r\n        startDragNDrop();\r\n    }\r\n}\r\nfunction unlisten(func) {\r\n    let i = listeners.findIndex(c => c.cb == func);\r\n    if (i != -1) {\r\n        listeners.splice(i, 1);\r\n    }\r\n}\r\n/**\r\n * currently used in multiple document situations (iframe), might be removed in the future\r\n */\r\nfunction triggerPaste(img) {\r\n    lastref = img;\r\n    for (var a in listeners) {\r\n        listeners[a].cb(lastref);\r\n    }\r\n}\r\nfunction pasted(img) {\r\n    pasting = false;\r\n    let cnv = img instanceof HTMLCanvasElement ? img : img.toCanvas();\r\n    triggerPaste(new _index__WEBPACK_IMPORTED_MODULE_0__[\"ImgRefCtx\"](cnv));\r\n}\r\nfunction error(mes, error) {\r\n    var _a, _b;\r\n    pasting = false;\r\n    for (var a in listeners) {\r\n        (_b = (_a = listeners[a]).error) === null || _b === void 0 ? void 0 : _b.call(_a, mes, error);\r\n    }\r\n}\r\nfunction startDragNDrop() {\r\n    var getitem = function (items) {\r\n        var foundimage = \"\";\r\n        for (var a = 0; a < items.length; a++) {\r\n            var item = items[a];\r\n            var m = item.type.match(/^image\\/(\\w+)$/);\r\n            if (m) {\r\n                if (m[1] == \"png\") {\r\n                    return item;\r\n                }\r\n                else {\r\n                    foundimage = m[1];\r\n                }\r\n            }\r\n        }\r\n        if (foundimage) {\r\n            error(\"The image you uploaded is not a .png image. Other image type have compression noise and can't be used for image detection.\", \"notpng\");\r\n        }\r\n        return null;\r\n    };\r\n    window.addEventListener(\"dragover\", function (e) {\r\n        e.preventDefault();\r\n    });\r\n    window.addEventListener(\"drop\", function (e) {\r\n        if (!e.dataTransfer) {\r\n            return;\r\n        }\r\n        var item = getitem(e.dataTransfer.items);\r\n        e.preventDefault();\r\n        if (!item) {\r\n            return;\r\n        }\r\n        fromFile(item.getAsFile());\r\n    });\r\n}\r\nfunction start() {\r\n    if (started) {\r\n        return;\r\n    }\r\n    started = true;\r\n    //determine if we have a clipboard api\r\n    //try{a=new Event(\"clipboard\"); a=\"clipboardData\" in a;}\r\n    //catch(e){a=false;}\r\n    var ischrome = !!navigator.userAgent.match(/Chrome/) && !navigator.userAgent.match(/Edge/);\r\n    //old method breaks after chrome 41, revert to good old user agent sniffing\r\n    //nvm, internet explorer (edge) decided that it wants to be chrome, however fails at delivering\r\n    //turns out this one is interesting, edge is a hybrid between the paste api's\r\n    var apipasted = function (e) {\r\n        if (!e.clipboardData) {\r\n            return;\r\n        }\r\n        for (var a = 0; a < e.clipboardData.items.length; a++) { //loop all data types\r\n            if (e.clipboardData.items[a].type.indexOf(\"image\") != -1) {\r\n                var file = e.clipboardData.items[a].getAsFile();\r\n                var img = new Image();\r\n                img.src = (window.URL || window.webkitURL).createObjectURL(file);\r\n                if (img.width > 0) {\r\n                    pasted(img);\r\n                }\r\n                else {\r\n                    img.onload = function () { pasted(img); };\r\n                }\r\n            }\r\n        }\r\n    };\r\n    if (ischrome) {\r\n        document.addEventListener(\"paste\", apipasted);\r\n    }\r\n    else {\r\n        var catcher = document.createElement(\"div\");\r\n        catcher.setAttribute(\"contenteditable\", \"\");\r\n        catcher.className = \"forcehidden\"; //retarded ie safety/bug, cant apply styles using js//TODO i don't even know what's going on\r\n        catcher.onpaste = function (e) {\r\n            if (e.clipboardData && e.clipboardData.items) {\r\n                apipasted(e);\r\n                return;\r\n            }\r\n            setTimeout(function () {\r\n                var b = catcher.children[0];\r\n                if (!b || b.tagName != \"IMG\") {\r\n                    return;\r\n                }\r\n                var img = new Image();\r\n                img.src = b.src;\r\n                var a = img.src.match(/^data:([\\w\\/]+);/);\r\n                if (img.width > 0) {\r\n                    pasted(img);\r\n                }\r\n                else {\r\n                    img.onload = function () { pasted(img); };\r\n                }\r\n                catcher.innerHTML = \"\";\r\n            }, 1);\r\n        };\r\n        document.body.appendChild(catcher);\r\n    }\r\n    //detect if ctrl-v is pressed and focus catcher if needed\r\n    document.addEventListener(\"keydown\", function (e) {\r\n        if (e.target.tagName == \"INPUT\") {\r\n            return;\r\n        }\r\n        if (e.keyCode != \"V\".charCodeAt(0) || !e.ctrlKey) {\r\n            return;\r\n        }\r\n        pasting = true;\r\n        setTimeout(function () {\r\n            if (pasting) {\r\n                error(\"You pressed Ctrl+V, but no image was pasted by your browser, make sure your clipboard contains an image, and not a link to an image.\", \"noimg\");\r\n            }\r\n        }, 1000);\r\n        if (catcher) {\r\n            catcher.focus();\r\n        }\r\n    });\r\n}\r\nfunction fileDialog() {\r\n    var fileinput = document.createElement(\"input\");\r\n    fileinput.type = \"file\";\r\n    fileinput.accept = \"image/png\";\r\n    fileinput.onchange = function () { if (fileinput.files && fileinput.files[0]) {\r\n        fromFile(fileinput.files[0]);\r\n    } };\r\n    fileinput.click();\r\n    return fileinput;\r\n}\r\nfunction fromFile(file) {\r\n    if (!file) {\r\n        return;\r\n    }\r\n    var reader = new FileReader();\r\n    reader.onload = function () {\r\n        var bytearray = new Uint8Array(reader.result);\r\n        if (_imagedetect__WEBPACK_IMPORTED_MODULE_1__[\"isPngBuffer\"](bytearray)) {\r\n            _imagedetect__WEBPACK_IMPORTED_MODULE_1__[\"clearPngColorspace\"](bytearray);\r\n        }\r\n        var blob = new Blob([bytearray], { type: \"image/png\" });\r\n        var img = new Image();\r\n        img.onerror = () => error(\"The file you uploaded could not be opened as an image.\", \"invalidfile\");\r\n        var bloburl = URL.createObjectURL(blob);\r\n        img.src = bloburl;\r\n        if (img.width > 0) {\r\n            pasted(img);\r\n            URL.revokeObjectURL(bloburl);\r\n        }\r\n        else {\r\n            img.onload = function () { pasted(img); URL.revokeObjectURL(bloburl); };\r\n        }\r\n    };\r\n    reader.readAsArrayBuffer(file);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/pasteinput.ts\n");

/***/ }),

/***/ "../node_modules/@alt1/base/rect.ts":
/*!******************************************!*\
  !*** ../node_modules/@alt1/base/rect.ts ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Rect; });\n//util class for rectangle maths\r\n//TODO shit this sucks can we remove it again?\r\n//more of a shorthand to get {x,y,width,height} than a class\r\n//kinda starting to like it again\r\n//TODO remove rant\r\n;\r\n/**\r\n * Simple rectangle class with some util functions\r\n */\r\nclass Rect {\r\n    constructor(x, y, w, h) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = w;\r\n        this.height = h;\r\n    }\r\n    static fromArgs(...args) {\r\n        if (typeof args[0] == \"object\") {\r\n            return new Rect(args[0].x, args[0].y, args[0].width, args[0].height);\r\n        }\r\n        else if (typeof args[0] == \"number\" && args.length >= 4) {\r\n            return new Rect(args[0], args[1], args[2], args[3]);\r\n        }\r\n        else {\r\n            throw new Error(\"invalid rect args\");\r\n        }\r\n    }\r\n    /**\r\n     * Resizes this Rect to include the full size of a given second rectangle\r\n     */\r\n    union(r2) {\r\n        var x = Math.min(this.x, r2.x);\r\n        var y = Math.min(this.y, r2.y);\r\n        this.width = Math.max(this.x + this.width, r2.x + r2.width) - x;\r\n        this.height = Math.max(this.y + this.height, r2.y + r2.height) - y;\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    /**\r\n     * Resizes this Rect to include a given point\r\n     */\r\n    includePoint(x, y) {\r\n        this.union(new Rect(x, y, 0, 0));\r\n    }\r\n    /**\r\n     * Grows the rectangle with the given dimensions\r\n     */\r\n    inflate(w, h) {\r\n        this.x -= w;\r\n        this.y -= h;\r\n        this.width += 2 * w;\r\n        this.height += 2 * h;\r\n    }\r\n    /**\r\n     * Resizes this Rect to the area that overlaps a given Rect\r\n     * width and height will be set to 0 if the intersection does not exist\r\n     */\r\n    intersect(r2) {\r\n        if (this.x < r2.x) {\r\n            this.width -= r2.x - this.x;\r\n            this.x = r2.x;\r\n        }\r\n        if (this.y < r2.y) {\r\n            this.height -= r2.y - this.y;\r\n            this.y = r2.y;\r\n        }\r\n        this.width = Math.min(this.x + this.width, r2.x + r2.width) - this.x;\r\n        this.height = Math.min(this.y + this.height, r2.y + r2.height) - this.y;\r\n        if (this.width <= 0 || this.height <= 0) {\r\n            this.width = 0;\r\n            this.height = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Returns wether this Rect has at least one pixel overlap with a given Rect\r\n     */\r\n    overlaps(r2) {\r\n        return this.x < r2.x + r2.width && this.x + this.width > r2.x && this.y < r2.y + r2.height && this.y + this.height > r2.y;\r\n    }\r\n    /**\r\n     * Returns wether a given Rect fits completely inside this Rect\r\n     * @param r2\r\n     */\r\n    contains(r2) {\r\n        return this.x <= r2.x && this.x + this.width >= r2.x + r2.width && this.y <= r2.y && this.y + this.height >= r2.y + r2.height;\r\n    }\r\n    /**\r\n     * Returns wether a given point lies inside this Rect\r\n     */\r\n    containsPoint(x, y) {\r\n        return this.x <= x && this.x + this.width > x && this.y <= y && this.y + this.height > y;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/rect.ts\n");

/***/ }),

/***/ "../node_modules/@alt1/base/wrapper.ts":
/*!*********************************************!*\
  !*** ../node_modules/@alt1/base/wrapper.ts ***!
  \*********************************************/
/*! exports provided: NoAlt1Error, Alt1Error, newestversion, hasAlt1, skinName, openbrowser, requireAlt1, getdisplaybounds, capture, captureHold, captureHoldScreen, captureHoldFullRs, transferImageData, decodeImageString, encodeImageString, mixColor, unmixColor, identifyApp, hasAlt1Version, getMousePosition, addResizeElement, on, removeListener, once, ImageStreamReader, captureAsync, captureMultiAsync, captureStream */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NoAlt1Error\", function() { return NoAlt1Error; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Alt1Error\", function() { return Alt1Error; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"newestversion\", function() { return newestversion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasAlt1\", function() { return hasAlt1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"skinName\", function() { return skinName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"openbrowser\", function() { return openbrowser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"requireAlt1\", function() { return requireAlt1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getdisplaybounds\", function() { return getdisplaybounds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"capture\", function() { return capture; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"captureHold\", function() { return captureHold; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"captureHoldScreen\", function() { return captureHoldScreen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"captureHoldFullRs\", function() { return captureHoldFullRs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transferImageData\", function() { return transferImageData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"decodeImageString\", function() { return decodeImageString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"encodeImageString\", function() { return encodeImageString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mixColor\", function() { return mixColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unmixColor\", function() { return unmixColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identifyApp\", function() { return identifyApp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasAlt1Version\", function() { return hasAlt1Version; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMousePosition\", function() { return getMousePosition; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addResizeElement\", function() { return addResizeElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"on\", function() { return on; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeListener\", function() { return removeListener; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"once\", function() { return once; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImageStreamReader\", function() { return ImageStreamReader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"captureAsync\", function() { return captureAsync; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"captureMultiAsync\", function() { return captureMultiAsync; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"captureStream\", function() { return captureStream; });\n/* harmony import */ var _rect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rect */ \"../node_modules/@alt1/base/rect.ts\");\n/* harmony import */ var _imgref__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imgref */ \"../node_modules/@alt1/base/imgref.ts\");\n/* harmony import */ var _imagedata_extensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./imagedata-extensions */ \"../node_modules/@alt1/base/imagedata-extensions.ts\");\n/* harmony import */ var _alt1api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./alt1api */ \"../node_modules/@alt1/base/alt1api.ts\");\n/* harmony import */ var _alt1api__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_alt1api__WEBPACK_IMPORTED_MODULE_3__);\n\r\n\r\n\r\n\r\n/**\r\n * Thrown when a method is called that can not be used outside of Alt1\r\n */\r\nclass NoAlt1Error extends Error {\r\n    constructor() {\r\n        super();\r\n        this.message = \"This method can not be ran outside of Alt1\";\r\n    }\r\n}\r\n;\r\n/**\r\n * Thrown when the Alt1 API returns an invalid result\r\n * Errors of a different type are throw when internal Alt1 errors occur\r\n */\r\nclass Alt1Error extends Error {\r\n}\r\n/**\r\n * The latest Alt1 version\r\n */\r\nvar newestversion = \"1.5.5\";\r\n/**\r\n * Whether the Alt1 API is available\r\n */\r\nvar hasAlt1 = (typeof alt1 != \"undefined\");\r\n/**\r\n * The name of the Alt1 interface skin. (Always \"default\" if running in a browser)\r\n */\r\nvar skinName = hasAlt1 ? alt1.skinName : \"default\";\r\n/**\r\n * Max number of bytes that can be sent by alt1 in one function\r\n * Not completely sure why this number is different than window.alt1.maxtranfer\r\n */\r\nvar maxtransfer = 4000000;\r\n/**\r\n * Open a link in the default browser\r\n * @deprecated use window.open instead\r\n */\r\nfunction openbrowser(url) {\r\n    if (hasAlt1) {\r\n        alt1.openBrowser(url);\r\n    }\r\n    else {\r\n        window.open(url, '_blank');\r\n    }\r\n}\r\n/**\r\n * Throw if Alt1 API is not available\r\n */\r\nfunction requireAlt1() {\r\n    if (!hasAlt1) {\r\n        throw new NoAlt1Error();\r\n    }\r\n}\r\n/**\r\n * Returns an object with a rectangle that spans all screens\r\n */\r\nfunction getdisplaybounds() {\r\n    if (!hasAlt1) {\r\n        return false;\r\n    }\r\n    return new _rect__WEBPACK_IMPORTED_MODULE_0__[\"default\"](alt1.screenX, alt1.screenY, alt1.screenWidth, alt1.screenHeight);\r\n}\r\n/**\r\n * gets an imagebuffer with pixel data about the requested region\r\n */\r\nfunction capture(...args) {\r\n    //TODO change null return on error into throw instead (x3)\r\n    if (!hasAlt1) {\r\n        throw new NoAlt1Error();\r\n    }\r\n    var rect = _rect__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromArgs(...args);\r\n    if (alt1.capture) {\r\n        return new _imagedata_extensions__WEBPACK_IMPORTED_MODULE_2__[\"ImageData\"](alt1.capture(rect.x, rect.y, rect.width, rect.height), rect.width, rect.height);\r\n    }\r\n    var buf = new _imagedata_extensions__WEBPACK_IMPORTED_MODULE_2__[\"ImageData\"](rect.width, rect.height);\r\n    if (rect.width * rect.height * 4 <= maxtransfer) {\r\n        var data = alt1.getRegion(rect.x, rect.y, rect.width, rect.height);\r\n        if (!data) {\r\n            return null;\r\n        }\r\n        decodeImageString(data, buf, 0, 0, rect.width, rect.height);\r\n    }\r\n    else {\r\n        //split up the request to to exceed the single transfer limit (for now)\r\n        var x1 = rect.x;\r\n        var ref = alt1.bindRegion(rect.x, rect.y, rect.width, rect.height);\r\n        if (ref <= 0) {\r\n            return null;\r\n        }\r\n        while (x1 < rect.x + rect.width) {\r\n            var x2 = Math.min(rect.x + rect.width, Math.floor(x1 + (maxtransfer / 4 / rect.height)));\r\n            var data = alt1.bindGetRegion(ref, x1, rect.y, x2 - x1, rect.height);\r\n            if (!data) {\r\n                return null;\r\n            }\r\n            decodeImageString(data, buf, x1 - rect.x, 0, x2 - x1, rect.height);\r\n            x1 = x2;\r\n        }\r\n    }\r\n    return buf;\r\n}\r\n/**\r\n * Makes alt1 bind an area of the rs client in memory without sending it to the js client\r\n * returns an imgref object which can be used to get pixel data using the imgreftobuf function\r\n * currently only one bind can exist per app and the ref in (v) will always be 1\r\n */\r\nfunction captureHold(x, y, w, h) {\r\n    x = Math.round(x);\r\n    y = Math.round(y);\r\n    w = Math.round(w);\r\n    h = Math.round(h);\r\n    requireAlt1();\r\n    var r = alt1.bindRegion(x, y, w, h);\r\n    if (r <= 0) {\r\n        throw new Alt1Error(\"capturehold failed\");\r\n    }\r\n    return new _imgref__WEBPACK_IMPORTED_MODULE_1__[\"ImgRefBind\"](r, x, y, w, h);\r\n}\r\n/**\r\n * Same as captureHoldRegion, but captures the screen instead of the rs client. it also uses screen coordinates instead and can capture outside of the rs client\r\n */\r\nfunction captureHoldScreen(x, y, w, h) {\r\n    x = Math.round(x);\r\n    y = Math.round(y);\r\n    w = Math.round(w);\r\n    h = Math.round(h);\r\n    requireAlt1();\r\n    var r = alt1.bindScreenRegion(x, y, w, h);\r\n    if (r <= 0) {\r\n        return false;\r\n    }\r\n    return new _imgref__WEBPACK_IMPORTED_MODULE_1__[\"ImgRefBind\"](r, x, y, w, h);\r\n}\r\n/**\r\n * bind the full rs window if the rs window can be detected by alt1, otherwise return the full screen\r\n */\r\nfunction captureHoldFullRs() {\r\n    return captureHold(0, 0, alt1.rsWidth, alt1.rsHeight);\r\n}\r\n/**\r\n * returns a subregion from a bound image\r\n * used internally in imgreftobuf if imgref is a bound image\r\n * @deprecated This should be handled internall by the imgrefbind.toData method\r\n */\r\nfunction transferImageData(handle, x, y, w, h) {\r\n    x = Math.round(x);\r\n    y = Math.round(y);\r\n    w = Math.round(w);\r\n    h = Math.round(h);\r\n    requireAlt1();\r\n    if (alt1.bindGetRegionBuffer) {\r\n        return new _imagedata_extensions__WEBPACK_IMPORTED_MODULE_2__[\"ImageData\"](alt1.bindGetRegionBuffer(handle, x, y, w, h), w, h);\r\n    }\r\n    var r = new _imagedata_extensions__WEBPACK_IMPORTED_MODULE_2__[\"ImageData\"](w, h);\r\n    var x1 = x;\r\n    while (true) { //split up the request to to exceed the single transfer limit (for now)\r\n        var x2 = Math.min(x + w, Math.floor(x1 + (maxtransfer / 4 / h)));\r\n        var a = alt1.bindGetRegion(handle, x1, y, x2 - x1, h);\r\n        if (!a) {\r\n            throw new Alt1Error();\r\n        }\r\n        decodeImageString(a, r, x1 - x, 0, x2 - x1, h);\r\n        x1 = x2;\r\n        if (x1 == x + w) {\r\n            break;\r\n        }\r\n        ;\r\n    }\r\n    return r;\r\n}\r\n/**\r\n * decodes a returned string from alt1 to an imagebuffer\r\n */\r\nfunction decodeImageString(imagestring, target, x, y, w, h) {\r\n    var bin = atob(imagestring);\r\n    var bytes = target.data;\r\n    w |= 0;\r\n    h |= 0;\r\n    var offset = 4 * x + 4 * y * target.width;\r\n    var target_width = target.width | 0;\r\n    for (var a = 0; a < w; a++) {\r\n        for (var b = 0; b < h; b++) {\r\n            var i1 = (offset + (a * 4 | 0) + (b * target_width * 4 | 0)) | 0;\r\n            var i2 = ((a * 4 | 0) + (b * 4 * w | 0)) | 0;\r\n            bytes[i1 + 0 | 0] = bin.charCodeAt(i2 + 2 | 0); //fix weird red/blue swap in c#\r\n            bytes[i1 + 1 | 0] = bin.charCodeAt(i2 + 1 | 0);\r\n            bytes[i1 + 2 | 0] = bin.charCodeAt(i2 + 0 | 0);\r\n            bytes[i1 + 3 | 0] = bin.charCodeAt(i2 + 3 | 0);\r\n        }\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * encodes an imagebuffer to a string\r\n */\r\nfunction encodeImageString(buf, sx = 0, sy = 0, sw = buf.width, sh = buf.height) {\r\n    var raw = \"\";\r\n    for (var y = sy; y < sy + sh; y++) {\r\n        for (var x = sx; x < sx + sw; x++) {\r\n            var i = 4 * x + 4 * buf.width * y | 0;\r\n            raw += String.fromCharCode(buf.data[i + 2 | 0]);\r\n            raw += String.fromCharCode(buf.data[i + 1 | 0]);\r\n            raw += String.fromCharCode(buf.data[i + 0 | 0]);\r\n            raw += String.fromCharCode(buf.data[i + 3 | 0]);\r\n        }\r\n    }\r\n    return btoa(raw);\r\n}\r\n/**\r\n * mixes the given color into a single int. This format is used by alt1\r\n */\r\nfunction mixColor(r, g, b, a = 255) {\r\n    return (b << 0) + (g << 8) + (r << 16) + (a << 24);\r\n}\r\nfunction unmixColor(col) {\r\n    var r = (col >> 16) & 0xff;\r\n    var g = (col >> 8) & 0xff;\r\n    var b = (col >> 0) & 0xff;\r\n    return [r, g, b];\r\n}\r\nfunction identifyApp(url) {\r\n    if (hasAlt1) {\r\n        alt1.identifyAppUrl(url);\r\n    }\r\n}\r\nfunction convertAlt1Version(str) {\r\n    var a = str.match(/^(\\d+)\\.(\\d+)\\.(\\d+)$/);\r\n    if (!a) {\r\n        throw new RangeError(\"Invalid version string\");\r\n    }\r\n    return (+a[1]) * 1000 * 1000 + (+a[2]) * 1000 + (+a[3]) * 1;\r\n}\r\nvar cachedVersionInt = -1;\r\n/**\r\n * checks if alt1 is running and at least the given version. versionstr should be a string with the version eg: 1.3.2\r\n * @param versionstr\r\n */\r\nfunction hasAlt1Version(versionstr) {\r\n    if (!hasAlt1) {\r\n        return false;\r\n    }\r\n    if (cachedVersionInt == -1) {\r\n        cachedVersionInt = alt1.versionint;\r\n    }\r\n    return cachedVersionInt >= convertAlt1Version(versionstr);\r\n}\r\n/**\r\n * Gets the current cursor position in the game, returns null if the rs window is not active (alt1.rsActive)\r\n */\r\nfunction getMousePosition() {\r\n    var pos = alt1.mousePosition;\r\n    if (pos == -1) {\r\n        return null;\r\n    }\r\n    return { x: pos >>> 16, y: pos & 0xFFFF };\r\n}\r\n/**\r\n * Registers a given HTML element as a frame border, when this element is dragged by the user the Alt1 frame will resize accordingly\r\n * Use the direction arguements to make a given direction stick to the mouse. eg. Only set left to true to make the element behave as the left border\r\n * Or set all to true to move the whole window. Not all combinations are permitted\r\n */\r\nfunction addResizeElement(el, left, top, right, bot) {\r\n    if (!hasAlt1 || !alt1.userResize) {\r\n        return;\r\n    }\r\n    el.addEventListener(\"mousedown\", function (e) {\r\n        alt1.userResize(left, top, right, bot);\r\n        e.preventDefault();\r\n    });\r\n}\r\n/**\r\n * Add an event listener\r\n */\r\nfunction on(type, listener) {\r\n    requireAlt1();\r\n    if (!alt1.events) {\r\n        alt1.events = {};\r\n    }\r\n    if (!alt1.events[type]) {\r\n        alt1.events[type] = [];\r\n    }\r\n    alt1.events[type].push(listener);\r\n}\r\n/**\r\n * Removes an event listener\r\n */\r\nfunction removeListener(type, listener) {\r\n    var elist = alt1.events && alt1.events[type];\r\n    if (!elist) {\r\n        return;\r\n    }\r\n    var i = elist.indexOf(listener);\r\n    if (i == -1) {\r\n        return;\r\n    }\r\n    elist.splice(i, 1);\r\n}\r\n/**\r\n * Listens for the event to fire once and then stops listening\r\n * @param event\r\n * @param cb\r\n */\r\nfunction once(type, listener) {\r\n    requireAlt1();\r\n    var fn = (e) => {\r\n        removeListener(type, fn);\r\n        listener(e);\r\n    };\r\n    on(type, fn);\r\n}\r\n;\r\n/**\r\n * Used to read a set of images from a binary stream returned by the Alt1 API\r\n */\r\nclass ImageStreamReader {\r\n    constructor(reader, ...args) {\r\n        this.framebuffer = null;\r\n        this.pos = 0;\r\n        this.reading = false;\r\n        this.closed = false;\r\n        //paused state\r\n        this.pausedindex = -1;\r\n        this.pausedbuffer = null;\r\n        this.streamreader = reader;\r\n        if (args[0] instanceof _imagedata_extensions__WEBPACK_IMPORTED_MODULE_2__[\"ImageData\"]) {\r\n            this.setFrameBuffer(args[0]);\r\n        }\r\n        else if (typeof args[0] == \"number\") {\r\n            this.setFrameBuffer(new _imagedata_extensions__WEBPACK_IMPORTED_MODULE_2__[\"ImageData\"](args[0], args[1]));\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    setFrameBuffer(buffer) {\r\n        if (this.reading) {\r\n            throw new Error(\"can't change framebuffer while reading\");\r\n        }\r\n        this.framebuffer = buffer;\r\n    }\r\n    /**\r\n     * Closes the underlying stream and ends reading\r\n     */\r\n    close() {\r\n        this.streamreader.cancel();\r\n    }\r\n    /**\r\n     * Reads a single image from the stream\r\n     */\r\n    async nextImage() {\r\n        if (this.reading) {\r\n            throw new Error(\"already reading from this stream\");\r\n        }\r\n        if (!this.framebuffer) {\r\n            throw new Error(\"framebuffer not set\");\r\n        }\r\n        this.reading = true;\r\n        var synctime = -Date.now();\r\n        var starttime = Date.now();\r\n        var r = false;\r\n        while (!r) {\r\n            if (this.pausedindex != -1 && this.pausedbuffer) {\r\n                r = this.readChunk(this.pausedindex, this.framebuffer.data, this.pausedbuffer);\r\n            }\r\n            else {\r\n                synctime += Date.now();\r\n                var res = await this.streamreader.read();\r\n                synctime -= Date.now();\r\n                if (res.done) {\r\n                    throw new Error(\"Stream closed while reading\");\r\n                }\r\n                var data = res.value;\r\n                r = this.readChunk(0, this.framebuffer.data, data);\r\n            }\r\n        }\r\n        synctime += Date.now();\r\n        //console.log(\"Decoded async image, \" + this.framebuffer.width + \"x\" + this.framebuffer.height + \" time: \" + (Date.now() - starttime) + \"ms (\" + synctime + \"ms main thread)\");\r\n        this.reading = false;\r\n        return this.framebuffer;\r\n    }\r\n    readChunk(i, framedata, buffer) {\r\n        //very hot code, explicit int32 casting with |0 speeds it up by ~ x2\r\n        i = i | 0;\r\n        var framesize = framedata.length | 0;\r\n        var pos = this.pos;\r\n        var datalen = buffer.length | 0;\r\n        //var data32 = new Float64Array(buffer.buffer);\r\n        //var framedata32 = new Float64Array(framedata.buffer);\r\n        //fix possible buffer misalignment\r\n        //align to 16 for extra loop unrolling\r\n        while (i < datalen) {\r\n            //slow loop, fix alignment and other issues\r\n            while (i < datalen && pos < framesize && (pos % 16 != 0 || !((i + 16 | 0) <= datalen && (pos + 16 | 0) <= framesize))) {\r\n                var rel = pos;\r\n                if (pos % 4 == 0) {\r\n                    rel = rel + 2 | 0;\r\n                }\r\n                if (pos % 4 == 2) {\r\n                    rel = rel - 2 | 0;\r\n                }\r\n                framedata[rel | 0] = buffer[i | 0];\r\n                i = i + 1 | 0;\r\n                pos = pos + 1 | 0;\r\n            }\r\n            //fast unrolled loop for large chunks i wish js had some sort of memcpy\r\n            if (pos % 16 == 0) {\r\n                while ((i + 16 | 0) <= datalen && (pos + 16 | 0) <= framesize) {\r\n                    framedata[pos + 0 | 0] = buffer[i + 2 | 0];\r\n                    framedata[pos + 1 | 0] = buffer[i + 1 | 0];\r\n                    framedata[pos + 2 | 0] = buffer[i + 0 | 0];\r\n                    framedata[pos + 3 | 0] = buffer[i + 3 | 0];\r\n                    framedata[pos + 4 | 0] = buffer[i + 6 | 0];\r\n                    framedata[pos + 5 | 0] = buffer[i + 5 | 0];\r\n                    framedata[pos + 6 | 0] = buffer[i + 4 | 0];\r\n                    framedata[pos + 7 | 0] = buffer[i + 7 | 0];\r\n                    framedata[pos + 8 | 0] = buffer[i + 10 | 0];\r\n                    framedata[pos + 9 | 0] = buffer[i + 9 | 0];\r\n                    framedata[pos + 10 | 0] = buffer[i + 8 | 0];\r\n                    framedata[pos + 11 | 0] = buffer[i + 11 | 0];\r\n                    framedata[pos + 12 | 0] = buffer[i + 14 | 0];\r\n                    framedata[pos + 13 | 0] = buffer[i + 13 | 0];\r\n                    framedata[pos + 14 | 0] = buffer[i + 12 | 0];\r\n                    framedata[pos + 15 | 0] = buffer[i + 15 | 0];\r\n                    //could speed it up another x2 but wouldn't be able to swap r/b swap and possible alignment issues\r\n                    //framedata32[pos / 8 + 0 | 0] = data32[i / 8 + 0 | 0];\r\n                    //framedata32[pos / 8 + 1 | 0] = data32[i / 8 + 1 | 0];\r\n                    //framedata32[pos / 4 + 2 | 0] = data32[i / 4 + 2 | 0];\r\n                    //framedata32[pos / 4 + 3 | 0] = data32[i / 4 + 3 | 0];\r\n                    pos = pos + 16 | 0;\r\n                    i = i + 16 | 0;\r\n                }\r\n            }\r\n            if (pos >= framesize) {\r\n                this.pausedbuffer = null;\r\n                this.pausedindex = -1;\r\n                this.pos = 0;\r\n                if (i != buffer.length - 1) {\r\n                    this.pausedbuffer = buffer;\r\n                    this.pausedindex = i;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        this.pos = pos;\r\n        this.pausedbuffer = null;\r\n        this.pausedindex = -1;\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Asynchronously captures a section of the game screen\r\n */\r\nasync function captureAsync(...args) {\r\n    requireAlt1();\r\n    var rect = _rect__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromArgs(...args);\r\n    if (alt1.captureAsync) {\r\n        let img = await alt1.captureAsync(rect.x, rect.y, rect.width, rect.height);\r\n        return new _imagedata_extensions__WEBPACK_IMPORTED_MODULE_2__[\"ImageData\"](img, rect.width, rect.height);\r\n    }\r\n    if (!hasAlt1Version(\"1.4.6\")) {\r\n        return capture(rect.x, rect.y, rect.width, rect.height);\r\n    }\r\n    var url = \"https://alt1api/pixel/getregion/\" + encodeURIComponent(JSON.stringify({ ...rect, format: \"raw\", quality: 1 }));\r\n    var res = await fetch(url);\r\n    var imgreader = new ImageStreamReader(res.body.getReader(), rect.width, rect.height);\r\n    return imgreader.nextImage();\r\n}\r\n/**\r\n * Asynchronously captures multple area's. This method captures the images in the same render frame if possible\r\n * @param areas\r\n */\r\nasync function captureMultiAsync(areas) {\r\n    requireAlt1();\r\n    var r = {};\r\n    if (alt1.captureMultiAsync) {\r\n        let bufs = await alt1.captureMultiAsync(areas);\r\n        for (let a in areas) {\r\n            if (!bufs[a]) {\r\n                r[a] = null;\r\n            }\r\n            r[a] = new _imagedata_extensions__WEBPACK_IMPORTED_MODULE_2__[\"ImageData\"](bufs[a], areas[a].width, areas[a].height);\r\n        }\r\n        return r;\r\n    }\r\n    var capts = [];\r\n    var captids = [];\r\n    for (var id in areas) {\r\n        if (areas[id]) {\r\n            capts.push(areas[id]);\r\n            captids.push(id);\r\n        }\r\n        else {\r\n            r[id] = null;\r\n        }\r\n    }\r\n    if (capts.length == 0) {\r\n        return r;\r\n    }\r\n    if (!hasAlt1Version(\"1.5.1\")) {\r\n        var proms = [];\r\n        for (var a = 0; a < capts.length; a++) {\r\n            proms.push(captureAsync(capts[a]));\r\n        }\r\n        var results = await Promise.all(proms);\r\n        for (var a = 0; a < capts.length; a++) {\r\n            r[captids[a]] = results[a];\r\n        }\r\n    }\r\n    else {\r\n        var res = await fetch(\"https://alt1api/pixel/getregionmulti/\" + encodeURIComponent(JSON.stringify({ areas: capts, format: \"raw\", quality: 1 })));\r\n        var imgreader = new ImageStreamReader(res.body.getReader());\r\n        for (var a = 0; a < capts.length; a++) {\r\n            var capt = capts[a];\r\n            imgreader.setFrameBuffer(new _imagedata_extensions__WEBPACK_IMPORTED_MODULE_2__[\"ImageData\"](capt.width, capt.height));\r\n            r[captids[a]] = await imgreader.nextImage();\r\n        }\r\n    }\r\n    return r;\r\n}\r\n/**\r\n * Starts capturing a realtime stream of the game. Make sure you keep reading the stream and close it when you're done or Alt1 WILL crash\r\n * @param framecb Called whenever a new frame is decoded\r\n * @param errorcb Called whenever an error occurs, the error is rethrown if not defined\r\n * @param fps Maximum fps of the stream\r\n */\r\nfunction captureStream(x, y, width, height, fps, framecb, errorcb) {\r\n    requireAlt1();\r\n    if (!hasAlt1Version(\"1.4.6\")) {\r\n        throw new Alt1Error(\"This function is not supported in this version of Alt1\");\r\n    }\r\n    var url = \"https://alt1api/pixel/streamregion/\" + encodeURIComponent(JSON.stringify({ x, y, width, height, fps, format: \"raw\" }));\r\n    var res = fetch(url).then(async (res) => {\r\n        var reader = new ImageStreamReader(res.body.getReader(), width, height);\r\n        try {\r\n            while (!reader.closed && !state.closed) {\r\n                var img = await reader.nextImage();\r\n                if (!state.closed) {\r\n                    framecb(img);\r\n                    state.framenr++;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            if (!state.closed) {\r\n                reader.close();\r\n                if (errorcb) {\r\n                    errorcb(e);\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        if (!reader.closed && state.closed) {\r\n            reader.close();\r\n        }\r\n    });\r\n    var state = {\r\n        x, y, width, height,\r\n        framenr: 0,\r\n        close: () => { state.closed = true; },\r\n        closed: false,\r\n    };\r\n    return state;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/wrapper.ts\n");

/***/ }),

/***/ "../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!../public/appconfig.json":
/*!******************************************************************************************!*\
  !*** ../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!../public/appconfig.json ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"appconfig.json\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9URVNULy4uL3B1YmxpYy9hcHBjb25maWcuanNvbj81ZTkxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWUsb0ZBQXVCLG1CQUFtQiIsImZpbGUiOiIuLi9ub2RlX21vZHVsZXMvZmlsZS1sb2FkZXIvZGlzdC9janMuanM/bmFtZT1bbmFtZV0uW2V4dF0hLi4vcHVibGljL2FwcGNvbmZpZy5qc29uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFwcGNvbmZpZy5qc29uXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!../public/appconfig.json\n");

/***/ }),

/***/ "../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!../public/index.html":
/*!**************************************************************************************!*\
  !*** ../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!../public/index.html ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"index.html\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9URVNULy4uL3B1YmxpYy9pbmRleC5odG1sPzhhNGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsZUFBZSIsImZpbGUiOiIuLi9ub2RlX21vZHVsZXMvZmlsZS1sb2FkZXIvZGlzdC9janMuanM/bmFtZT1bbmFtZV0uW2V4dF0hLi4vcHVibGljL2luZGV4Lmh0bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW5kZXguaHRtbFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!../public/index.html\n");

/***/ }),

/***/ "./homebutton.data.png":
/*!*****************************!*\
  !*** ./homebutton.data.png ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports=__webpack_require__(/*! @alt1/base */ \"../node_modules/@alt1/base/index.ts\").ImageDetect.imageDataFromBase64(\"iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAGESURBVDhPY4yxzHSqrxaTEnxy9MaNTbu+fnvPgAq4uQQ1/NxkrDVePXu/r7GVcd6OJzx8HPvXbf589BRUCTbAa23mGOT75dMPxi2Xvm7uWfri+lGoDBjwsnAByc9/vkG4ECChae1bEs10fP8piOpvXz8sOzQHiIBsoFKIaogIUArIBioDKmZ6uGIVRDWQhAAgG46gQjAFQMVMQJOQJYDg64/PcAQVAgOgMqBiJrhquPT3nz/QGHApoGJGVy1/CAcoOvPAZggbDaQ7+HJz8ELYTBAKqBpuHiYASsEtYYGz4CDc2AbKYmBYefYIlAVzGNQGoBk/f33/+ukHEEFEIAAiApSC288EdBxENZDz49tvIAIy2Nk4gQhZBKIHqJhJxSsAohoIXv1hASIIGwKQRYDKgIpBaWljbfXtB5cgoniAqoKef3Mrs46pr6Kr8/fr9959eAmVwQaAqs2Li18+fML89uwlZWM7oJ6f3xi+PH/49+8fqBIYAHpGxcbHLCXp68u361uKANkF/40vZkoCAAAAAElFTkSuQmCC\")//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9URVNULy4vaG9tZWJ1dHRvbi5kYXRhLnBuZz84MjkyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyx1REFBWSIsImZpbGUiOiIuL2hvbWVidXR0b24uZGF0YS5wbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiQGFsdDEvYmFzZVwiKS5JbWFnZURldGVjdC5pbWFnZURhdGFGcm9tQmFzZTY0KFwiaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJBQUFBQVFDQUlBQUFDUWtXZzJBQUFBQVc1dlVFVUFZdGRNbEFBQUFBUnViMUJGQUFBQUFFRWdqaUlBQUFBSmJtOVFSUUFBQUFBQUFBQUFBS0dLY3RVQUFBR0VTVVJCVkRoUFk0eXh6SFNxcnhhVEVueHk5TWFOVGJ1K2ZudlBnQXE0dVFRMS9OeGtyRFZlUFh1L3I3R1ZjZDZPSnp4OEhQdlhiZjU4OUJSVUNUYkFhMjNtR09UNzVkTVB4aTJYdm03dVdmcmkrbEdvREJqd3NuQUJ5YzkvdmtHNEVDQ2hhZTFiRXMxMGZQOHBpT3B2WHo4c096UUhpSUJzb0ZLSWFvZ0lVQXJJQmlvREttWjZ1R0lWUkRXUWhBQWdHNDZnUWpBRlFNVk1RSk9RSllEZzY0L1BjQVFWQWdPZ01xQmlKcmhxdVBUM256L1FHSEFwb0dKR1Z5MS9DQWNvT3ZQQVpnZ2JEYVE3K0hKejhFTFlUQkFLcUJwdUhpWUFTc0V0WVlHejRDRGMyQWJLWW1CWWVmWUlsQVZ6R05RR29Cay9mMzMvK3VrSEVFRkVJQUFpQXBTQzI4OEVkQnhFTlpEejQ5dHZJQUl5Mk5rNGdRaFpCS0lIcUpoSnhTc0FvaG9JWHYxaEFTSUlHd0tRUllES2dJcEJhV2xqYmZYdEI1Y2dvbmlBcW9LZWYzTXJzNDZwcjZLcjgvZnI5OTU5ZUFtVndRYUFxczJMaTE4K2ZNTDg5dXdsWldNN29KNmYzeGkrUEgvNDkrOGZxQklZQUhwR3hjYkhMQ1hwNjh1MzYxdUtBTmtGLzQwdlprb0NBQUFBQUVsRlRrU3VRbUNDXCIpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./homebutton.data.png\n");

/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/*! exports provided: capture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"capture\", function() { return capture; });\n/* harmony import */ var _alt1_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @alt1/base */ \"../node_modules/@alt1/base/index.ts\");\n\r\n//tell webpack to add index.html and appconfig.json to output\r\n__webpack_require__(/*! file-loader?name=[name].[ext]!../public/index.html */ \"../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!../public/index.html\");\r\n__webpack_require__(/*! file-loader?name=[name].[ext]!../public/appconfig.json */ \"../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!../public/appconfig.json\");\r\n//loads all images as raw pixel data async, images have to be saved as *.data.png\r\n//this also takes care of srgb header bullshit\r\n//this is async to cant acccess them instantly but generally takes <20ms\r\nvar imgs = _alt1_base__WEBPACK_IMPORTED_MODULE_0__[\"ImageDetect\"].webpackImages({\r\n    homeport: __webpack_require__(/*! ./homebutton.data.png */ \"./homebutton.data.png\")\r\n});\r\n//only works once for some reason... whatever you get the idea\r\n_alt1_base__WEBPACK_IMPORTED_MODULE_0__[\"PasteInput\"].listen(ref => {\r\n    var pos = ref.findSubimage(imgs.homeport);\r\n    document.write(\"find result: \" + JSON.stringify(pos));\r\n});\r\n//You can reach exports on window.TEST because of\r\n//config.makeUmd(\"testpackage\", \"TEST\"); in webpack.config.ts\r\nfunction capture() {\r\n    var img = _alt1_base__WEBPACK_IMPORTED_MODULE_0__[\"captureHoldFullRs\"]();\r\n    var loc = img.findSubimage(imgs.homeport);\r\n    document.write(\"homeport matches: \" + JSON.stringify(loc));\r\n    if (loc.length != 0) {\r\n        alt1.overLayRect(_alt1_base__WEBPACK_IMPORTED_MODULE_0__[\"mixColor\"](255, 255, 255), loc[0].x, loc[0].y, imgs.homeport.width, imgs.homeport.height, 2000, 3);\r\n    }\r\n    else {\r\n        alt1.overLayTextEx(\"Couldn't find homeport button\", _alt1_base__WEBPACK_IMPORTED_MODULE_0__[\"mixColor\"](255, 255, 255), 20, Math.round(alt1.rsWidth / 2), 200, 2000, \"\", true, true);\r\n    }\r\n    //get raw pixels of image and show on screen (used mostly for debug)\r\n    var buf = img.toData(100, 100, 200, 200);\r\n    buf.show();\r\n}\r\n//print text world\r\n//also the worst possible example of how to use global exposed exports as described in webpack.config.json\r\ndocument.write(`\r\n\t<div>paste an image of rs with homeport button (or not)<div>\r\n\t<div onclick='TEST.capture()'>Click to capture if on alt1</div>`);\r\nif (window.alt1) {\r\n    //tell alt1 about the app\r\n    //this makes alt1 show the add app button when running insane the embedded browser\r\n    //also updates app settings if they are changed\r\n    alt1.identifyAppUrl(\"./appconfig.json\");\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9URVNULy4vaW5kZXgudHM/YTk1OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBb0M7QUFFcEMsNkRBQTZEO0FBQzdELG1CQUFPLENBQUMsMElBQXFELENBQUMsQ0FBQztBQUMvRCxtQkFBTyxDQUFDLGtKQUF5RCxDQUFDLENBQUM7QUFFbkUsaUZBQWlGO0FBQ2pGLDhDQUE4QztBQUM5Qyx3RUFBd0U7QUFDeEUsSUFBSSxJQUFJLEdBQUcsc0RBQWlCLENBQUMsYUFBYSxDQUFDO0lBQzFDLFFBQVEsRUFBRSxtQkFBTyxDQUFDLG9EQUF1QixDQUFDO0NBQzFDLENBQUMsQ0FBQztBQUNILDhEQUE4RDtBQUM5RCxxREFBZ0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUU7SUFDN0IsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELENBQUMsQ0FBQyxDQUFDO0FBRUgsaURBQWlEO0FBQ2pELDZEQUE2RDtBQUN0RCxTQUFTLE9BQU87SUFDdEIsSUFBSSxHQUFHLEdBQUcsNERBQXVCLEVBQUUsQ0FBQztJQUNwQyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQyxRQUFRLENBQUMsS0FBSyxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUUzRCxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1FBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsbURBQWMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDeEg7U0FBTTtRQUNOLElBQUksQ0FBQyxhQUFhLENBQUMsK0JBQStCLEVBQUUsbURBQWMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ2hKO0lBQ0Qsb0VBQW9FO0lBQ3BFLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDekMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osQ0FBQztBQUVELGtCQUFrQjtBQUNsQiwwR0FBMEc7QUFDMUcsUUFBUSxDQUFDLEtBQUssQ0FBQzs7aUVBRWtELENBQ2hFLENBQUM7QUFFRixJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7SUFDaEIseUJBQXlCO0lBQ3pCLGtGQUFrRjtJQUNsRiwrQ0FBK0M7SUFDL0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0NBQ3hDIiwiZmlsZSI6Ii4vaW5kZXgudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhMWxpYiBmcm9tIFwiQGFsdDEvYmFzZVwiO1xyXG5cclxuLy90ZWxsIHdlYnBhY2sgdG8gYWRkIGluZGV4Lmh0bWwgYW5kIGFwcGNvbmZpZy5qc29uIHRvIG91dHB1dFxyXG5yZXF1aXJlKFwiIWZpbGUtbG9hZGVyP25hbWU9W25hbWVdLltleHRdIS4uL3B1YmxpYy9pbmRleC5odG1sXCIpO1xyXG5yZXF1aXJlKFwiIWZpbGUtbG9hZGVyP25hbWU9W25hbWVdLltleHRdIS4uL3B1YmxpYy9hcHBjb25maWcuanNvblwiKTtcclxuXHJcbi8vbG9hZHMgYWxsIGltYWdlcyBhcyByYXcgcGl4ZWwgZGF0YSBhc3luYywgaW1hZ2VzIGhhdmUgdG8gYmUgc2F2ZWQgYXMgKi5kYXRhLnBuZ1xyXG4vL3RoaXMgYWxzbyB0YWtlcyBjYXJlIG9mIHNyZ2IgaGVhZGVyIGJ1bGxzaGl0XHJcbi8vdGhpcyBpcyBhc3luYyB0byBjYW50IGFjY2Nlc3MgdGhlbSBpbnN0YW50bHkgYnV0IGdlbmVyYWxseSB0YWtlcyA8MjBtc1xyXG52YXIgaW1ncyA9IGExbGliLkltYWdlRGV0ZWN0LndlYnBhY2tJbWFnZXMoe1xyXG5cdGhvbWVwb3J0OiByZXF1aXJlKFwiLi9ob21lYnV0dG9uLmRhdGEucG5nXCIpXHJcbn0pO1xyXG4vL29ubHkgd29ya3Mgb25jZSBmb3Igc29tZSByZWFzb24uLi4gd2hhdGV2ZXIgeW91IGdldCB0aGUgaWRlYVxyXG5hMWxpYi5QYXN0ZUlucHV0Lmxpc3RlbihyZWYgPT4ge1xyXG5cdHZhciBwb3MgPSByZWYuZmluZFN1YmltYWdlKGltZ3MuaG9tZXBvcnQpO1xyXG5cdGRvY3VtZW50LndyaXRlKFwiZmluZCByZXN1bHQ6IFwiICsgSlNPTi5zdHJpbmdpZnkocG9zKSk7XHJcbn0pO1xyXG5cclxuLy9Zb3UgY2FuIHJlYWNoIGV4cG9ydHMgb24gd2luZG93LlRFU1QgYmVjYXVzZSBvZlxyXG4vL2NvbmZpZy5tYWtlVW1kKFwidGVzdHBhY2thZ2VcIiwgXCJURVNUXCIpOyBpbiB3ZWJwYWNrLmNvbmZpZy50c1xyXG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZSgpIHtcclxuXHR2YXIgaW1nID0gYTFsaWIuY2FwdHVyZUhvbGRGdWxsUnMoKTtcclxuXHR2YXIgbG9jID0gaW1nLmZpbmRTdWJpbWFnZShpbWdzLmhvbWVwb3J0KTtcclxuXHRkb2N1bWVudC53cml0ZShcImhvbWVwb3J0IG1hdGNoZXM6IFwiICsgSlNPTi5zdHJpbmdpZnkobG9jKSk7XHJcblxyXG5cdGlmIChsb2MubGVuZ3RoICE9IDApIHtcclxuXHRcdGFsdDEub3ZlckxheVJlY3QoYTFsaWIubWl4Q29sb3IoMjU1LCAyNTUsIDI1NSksIGxvY1swXS54LCBsb2NbMF0ueSwgaW1ncy5ob21lcG9ydC53aWR0aCwgaW1ncy5ob21lcG9ydC5oZWlnaHQsIDIwMDAsIDMpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRhbHQxLm92ZXJMYXlUZXh0RXgoXCJDb3VsZG4ndCBmaW5kIGhvbWVwb3J0IGJ1dHRvblwiLCBhMWxpYi5taXhDb2xvcigyNTUsIDI1NSwgMjU1KSwgMjAsIE1hdGgucm91bmQoYWx0MS5yc1dpZHRoIC8gMiksIDIwMCwgMjAwMCwgXCJcIiwgdHJ1ZSwgdHJ1ZSk7XHJcblx0fVxyXG5cdC8vZ2V0IHJhdyBwaXhlbHMgb2YgaW1hZ2UgYW5kIHNob3cgb24gc2NyZWVuICh1c2VkIG1vc3RseSBmb3IgZGVidWcpXHJcblx0dmFyIGJ1ZiA9IGltZy50b0RhdGEoMTAwLCAxMDAsIDIwMCwgMjAwKTtcclxuXHRidWYuc2hvdygpO1xyXG59XHJcblxyXG4vL3ByaW50IHRleHQgd29ybGRcclxuLy9hbHNvIHRoZSB3b3JzdCBwb3NzaWJsZSBleGFtcGxlIG9mIGhvdyB0byB1c2UgZ2xvYmFsIGV4cG9zZWQgZXhwb3J0cyBhcyBkZXNjcmliZWQgaW4gd2VicGFjay5jb25maWcuanNvblxyXG5kb2N1bWVudC53cml0ZShgXHJcblx0PGRpdj5wYXN0ZSBhbiBpbWFnZSBvZiBycyB3aXRoIGhvbWVwb3J0IGJ1dHRvbiAob3Igbm90KTxkaXY+XHJcblx0PGRpdiBvbmNsaWNrPSdURVNULmNhcHR1cmUoKSc+Q2xpY2sgdG8gY2FwdHVyZSBpZiBvbiBhbHQxPC9kaXY+YFxyXG4pO1xyXG5cclxuaWYgKHdpbmRvdy5hbHQxKSB7XHJcblx0Ly90ZWxsIGFsdDEgYWJvdXQgdGhlIGFwcFxyXG5cdC8vdGhpcyBtYWtlcyBhbHQxIHNob3cgdGhlIGFkZCBhcHAgYnV0dG9uIHdoZW4gcnVubmluZyBpbnNhbmUgdGhlIGVtYmVkZGVkIGJyb3dzZXJcclxuXHQvL2Fsc28gdXBkYXRlcyBhcHAgc2V0dGluZ3MgaWYgdGhleSBhcmUgY2hhbmdlZFxyXG5cdGFsdDEuaWRlbnRpZnlBcHBVcmwoXCIuL2FwcGNvbmZpZy5qc29uXCIpO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./index.ts\n");

/***/ }),

/***/ 0:
/*!************************!*\
  !*** multi ./index.ts ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\Users\mok_1\Documents\alt1\src\index.ts */"./index.ts");


/***/ })

/******/ });
});